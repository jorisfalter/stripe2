{"ast":null,"code":"'use strict';\n\nconst resources = require('./resources');\n\nconst DEFAULT_HOST = 'api.stripe.com';\nconst DEFAULT_PORT = '443';\nconst DEFAULT_BASE_PATH = '/v1/';\nconst DEFAULT_API_VERSION = null;\nconst DEFAULT_TIMEOUT = 80000;\nStripe.PACKAGE_VERSION = require('../package.json').version;\n\nconst utils = require('./utils');\n\nconst {\n  determineProcessUserAgentProperties,\n  emitWarning\n} = utils;\nStripe.USER_AGENT = {\n  bindings_version: Stripe.PACKAGE_VERSION,\n  lang: 'node',\n  publisher: 'stripe',\n  uname: null,\n  typescript: false,\n  ...determineProcessUserAgentProperties()\n};\n/** @private */\n\nStripe._UNAME_CACHE = null;\nconst MAX_NETWORK_RETRY_DELAY_SEC = 2;\nconst INITIAL_NETWORK_RETRY_DELAY_SEC = 0.5;\nconst APP_INFO_PROPERTIES = ['name', 'version', 'url', 'partner_id'];\nconst ALLOWED_CONFIG_PROPERTIES = ['apiVersion', 'typescript', 'maxNetworkRetries', 'httpAgent', 'httpClient', 'timeout', 'host', 'port', 'protocol', 'telemetry', 'appInfo', 'stripeAccount'];\n\nconst EventEmitter = require('events').EventEmitter;\n\nStripe.StripeResource = require('./StripeResource');\nStripe.resources = resources;\n\nconst {\n  HttpClient,\n  HttpClientResponse\n} = require('./net/HttpClient');\n\nStripe.HttpClient = HttpClient;\nStripe.HttpClientResponse = HttpClientResponse;\n\nconst CryptoProvider = require('./crypto/CryptoProvider');\n\nStripe.CryptoProvider = CryptoProvider;\n\nfunction Stripe(key) {\n  let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!(this instanceof Stripe)) {\n    return new Stripe(key, config);\n  }\n\n  const props = this._getPropsFromConfig(config);\n\n  Object.defineProperty(this, '_emitter', {\n    value: new EventEmitter(),\n    enumerable: false,\n    configurable: false,\n    writable: false\n  });\n  this.VERSION = Stripe.PACKAGE_VERSION;\n  this.on = this._emitter.on.bind(this._emitter);\n  this.once = this._emitter.once.bind(this._emitter);\n  this.off = this._emitter.removeListener.bind(this._emitter);\n\n  if (props.protocol && props.protocol !== 'https' && (!props.host || /\\.stripe\\.com$/.test(props.host))) {\n    throw new Error('The `https` protocol must be used when sending requests to `*.stripe.com`');\n  }\n\n  const agent = props.httpAgent || null;\n  this._api = {\n    auth: null,\n    host: props.host || DEFAULT_HOST,\n    port: props.port || DEFAULT_PORT,\n    protocol: props.protocol || 'https',\n    basePath: DEFAULT_BASE_PATH,\n    version: props.apiVersion || DEFAULT_API_VERSION,\n    timeout: utils.validateInteger('timeout', props.timeout, DEFAULT_TIMEOUT),\n    maxNetworkRetries: utils.validateInteger('maxNetworkRetries', props.maxNetworkRetries, 0),\n    agent: agent,\n    httpClient: props.httpClient || Stripe.createNodeHttpClient(agent),\n    dev: false,\n    stripeAccount: props.stripeAccount || null\n  };\n  const typescript = props.typescript || false;\n\n  if (typescript !== Stripe.USER_AGENT.typescript) {\n    // The mutation here is uncomfortable, but likely fastest;\n    // serializing the user agent involves shelling out to the system,\n    // and given some users may instantiate the library many times without switching between TS and non-TS,\n    // we only want to incur the performance hit when that actually happens.\n    Stripe.USER_AGENT.typescript = typescript;\n  }\n\n  if (props.appInfo) {\n    this._setAppInfo(props.appInfo);\n  }\n\n  this._prepResources();\n\n  this._setApiKey(key);\n\n  this.errors = require('./Error');\n  this.webhooks = require('./Webhooks');\n  this._prevRequestMetrics = [];\n  this._enableTelemetry = props.telemetry !== false; // Expose StripeResource on the instance too\n\n  this.StripeResource = Stripe.StripeResource;\n}\n\nStripe.errors = require('./Error');\nStripe.webhooks = require('./Webhooks');\n\nStripe.createNodeHttpClient = agent => {\n  const {\n    NodeHttpClient\n  } = require('./net/NodeHttpClient');\n\n  return new NodeHttpClient(agent);\n};\n/**\n * Creates an HTTP client for issuing Stripe API requests which uses the Web\n * Fetch API.\n *\n * A fetch function can optionally be passed in as a parameter. If none is\n * passed, will default to the default `fetch` function in the global scope.\n */\n\n\nStripe.createFetchHttpClient = fetchFn => {\n  const {\n    FetchHttpClient\n  } = require('./net/FetchHttpClient');\n\n  return new FetchHttpClient(fetchFn);\n};\n/**\n * Create a CryptoProvider which uses the built-in Node crypto libraries for\n * its crypto operations.\n */\n\n\nStripe.createNodeCryptoProvider = () => {\n  const NodeCryptoProvider = require('./crypto/NodeCryptoProvider');\n\n  return new NodeCryptoProvider();\n};\n/**\n * Creates a CryptoProvider which uses the Subtle Crypto API from the Web\n * Crypto API spec for its crypto operations.\n *\n * A SubtleCrypto interface can optionally be passed in as a parameter. If none\n * is passed, will default to the default `crypto.subtle` object in the global\n * scope.\n */\n\n\nStripe.createSubtleCryptoProvider = subtleCrypto => {\n  const SubtleCryptoProvider = require('./crypto/SubtleCryptoProvider');\n\n  return new SubtleCryptoProvider(subtleCrypto);\n};\n\nStripe.prototype = {\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   host: 'example.com',\n   *   port: '8080',\n   *   protocol: 'http',\n   * });\n   *\n   */\n  setHost(host, port, protocol) {\n    emitWarning('`setHost` is deprecated. Use the `host` config option instead.');\n\n    this._setApiField('host', host);\n\n    if (port) {\n      this.setPort(port);\n    }\n\n    if (protocol) {\n      this.setProtocol(protocol);\n    }\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   protocol: 'http',\n   * });\n   *\n   */\n  setProtocol(protocol) {\n    emitWarning('`setProtocol` is deprecated. Use the `protocol` config option instead.');\n\n    this._setApiField('protocol', protocol.toLowerCase());\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   port: 3000,\n   * });\n   *\n   */\n  setPort(port) {\n    emitWarning('`setPort` is deprecated. Use the `port` config option instead.');\n\n    this._setApiField('port', port);\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   apiVersion: API_VERSION,\n   * });\n   *\n   */\n  setApiVersion(version) {\n    emitWarning('`setApiVersion` is deprecated. Use the `apiVersion` config or request option instead.');\n\n    if (version) {\n      this._setApiField('version', version);\n    }\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY);\n   *\n   * Or, for Stripe Connect, use `stripeAccount` instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   stripeAccount: 'acct_...',\n   * });\n   *\n   * Or, to use a different apiKey on a given request:\n   *\n   * stripe.customers.create(params, {apiKey: 'sk_test_...'});\n   */\n  setApiKey(key) {\n    emitWarning('`setApiKey` is deprecated. Use the `apiKey` request option instead.');\n\n    this._setApiKey(key);\n  },\n\n  /**\n   * @private\n   */\n  _setApiKey(key) {\n    if (key) {\n      this._setApiField('auth', `Bearer ${key}`);\n    }\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   timeout: TIMEOUT_MS,\n   * });\n   */\n  setTimeout(timeout) {\n    emitWarning('`setTimeout` is deprecated. Use the `timeout` config or request option instead.');\n\n    this._setApiField('timeout', timeout == null ? DEFAULT_TIMEOUT : timeout);\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   appInfo: {\n   *     name: 'MyPlugin',\n   *     version: '1.4.2',\n   *     url: 'https://myplugin.com',\n   *     partner_id: '1234',\n   *   },\n   * });\n   */\n  setAppInfo(info) {\n    emitWarning('`setAppInfo` is deprecated. Use the `appInfo` config option instead.');\n\n    this._setAppInfo(info);\n  },\n\n  /**\n   * @private\n   * This may be removed in the future.\n   */\n  _setAppInfo(info) {\n    if (info && typeof info !== 'object') {\n      throw new Error('AppInfo must be an object.');\n    }\n\n    if (info && !info.name) {\n      throw new Error('AppInfo.name is required');\n    }\n\n    info = info || {};\n    const appInfo = APP_INFO_PROPERTIES.reduce((accum, prop) => {\n      if (typeof info[prop] == 'string') {\n        accum = accum || {};\n        accum[prop] = info[prop];\n      }\n\n      return accum;\n    }, undefined);\n    this._appInfo = appInfo;\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const ProxyAgent = require('https-proxy-agent');\n   * const stripe = new Stripe(API_KEY, {\n   *   httpAgent: new ProxyAgent(process.env.http_proxy),\n   * });\n   *\n   */\n  setHttpAgent(agent) {\n    emitWarning('`setHttpAgent` is deprecated. Use the `httpAgent` config option instead.');\n\n    this._setApiField('agent', agent);\n  },\n\n  /**\n   * @private\n   * This may be removed in the future.\n   */\n  _setApiField(key, value) {\n    this._api[key] = value;\n  },\n\n  /**\n   * @private\n   * Please open or upvote an issue at github.com/stripe/stripe-node\n   * if you use this, detailing your use-case.\n   *\n   * It may be deprecated and removed in the future.\n   */\n  getApiField(key) {\n    return this._api[key];\n  },\n\n  setClientId(clientId) {\n    this._clientId = clientId;\n  },\n\n  getClientId() {\n    return this._clientId;\n  },\n\n  /**\n   * @private\n   * Please open or upvote an issue at github.com/stripe/stripe-node\n   * if you use this, detailing your use-case.\n   *\n   * It may be deprecated and removed in the future.\n   */\n  getConstant: c => {\n    switch (c) {\n      case 'DEFAULT_HOST':\n        return DEFAULT_HOST;\n\n      case 'DEFAULT_PORT':\n        return DEFAULT_PORT;\n\n      case 'DEFAULT_BASE_PATH':\n        return DEFAULT_BASE_PATH;\n\n      case 'DEFAULT_API_VERSION':\n        return DEFAULT_API_VERSION;\n\n      case 'DEFAULT_TIMEOUT':\n        return DEFAULT_TIMEOUT;\n\n      case 'MAX_NETWORK_RETRY_DELAY_SEC':\n        return MAX_NETWORK_RETRY_DELAY_SEC;\n\n      case 'INITIAL_NETWORK_RETRY_DELAY_SEC':\n        return INITIAL_NETWORK_RETRY_DELAY_SEC;\n    }\n\n    return Stripe[c];\n  },\n\n  getMaxNetworkRetries() {\n    return this.getApiField('maxNetworkRetries');\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   maxNetworkRetries: 2,\n   * });\n   *\n   */\n  setMaxNetworkRetries(maxNetworkRetries) {\n    this._setApiNumberField('maxNetworkRetries', maxNetworkRetries);\n  },\n\n  /**\n   * @private\n   * This may be removed in the future.\n   */\n  _setApiNumberField(prop, n, defaultVal) {\n    const val = utils.validateInteger(prop, n, defaultVal);\n\n    this._setApiField(prop, val);\n  },\n\n  getMaxNetworkRetryDelay() {\n    return MAX_NETWORK_RETRY_DELAY_SEC;\n  },\n\n  getInitialNetworkRetryDelay() {\n    return INITIAL_NETWORK_RETRY_DELAY_SEC;\n  },\n\n  /**\n   * @private\n   */\n  getUname(cb) {\n    if (!Stripe._UNAME_CACHE) {\n      Stripe._UNAME_CACHE = new Promise(resolve => {\n        utils.safeExec('uname -a', (err, uname) => {\n          resolve(uname);\n        });\n      });\n    }\n\n    Stripe._UNAME_CACHE.then(uname => cb(uname));\n  },\n\n  /**\n   * @private\n   * Please open or upvote an issue at github.com/stripe/stripe-node\n   * if you use this, detailing your use-case.\n   *\n   * It may be deprecated and removed in the future.\n   *\n   * Gets a JSON version of a User-Agent and uses a cached version for a slight\n   * speed advantage.\n   */\n  getClientUserAgent(cb) {\n    return this.getClientUserAgentSeeded(Stripe.USER_AGENT, cb);\n  },\n\n  /**\n   * @private\n   * Please open or upvote an issue at github.com/stripe/stripe-node\n   * if you use this, detailing your use-case.\n   *\n   * It may be deprecated and removed in the future.\n   *\n   * Gets a JSON version of a User-Agent by encoding a seeded object and\n   * fetching a uname from the system.\n   */\n  getClientUserAgentSeeded(seed, cb) {\n    this.getUname(uname => {\n      const userAgent = {};\n\n      for (const field in seed) {\n        userAgent[field] = encodeURIComponent(seed[field]);\n      } // URI-encode in case there are unusual characters in the system's uname.\n\n\n      userAgent.uname = encodeURIComponent(uname || 'UNKNOWN');\n      const client = this.getApiField('httpClient');\n\n      if (client) {\n        userAgent.httplib = encodeURIComponent(client.getClientName());\n      }\n\n      if (this._appInfo) {\n        userAgent.application = this._appInfo;\n      }\n\n      cb(JSON.stringify(userAgent));\n    });\n  },\n\n  /**\n   * @private\n   * Please open or upvote an issue at github.com/stripe/stripe-node\n   * if you use this, detailing your use-case.\n   *\n   * It may be deprecated and removed in the future.\n   */\n  getAppInfoAsString() {\n    if (!this._appInfo) {\n      return '';\n    }\n\n    let formatted = this._appInfo.name;\n\n    if (this._appInfo.version) {\n      formatted += `/${this._appInfo.version}`;\n    }\n\n    if (this._appInfo.url) {\n      formatted += ` (${this._appInfo.url})`;\n    }\n\n    return formatted;\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   telemetry: false,\n   * });\n   *\n   */\n  setTelemetryEnabled(enableTelemetry) {\n    emitWarning('`setTelemetryEnabled` is deprecated. Use the `telemetry` config option instead.');\n    this._enableTelemetry = enableTelemetry;\n  },\n\n  getTelemetryEnabled() {\n    return this._enableTelemetry;\n  },\n\n  /**\n   * @private\n   * This may be removed in the future.\n   */\n  _prepResources() {\n    for (const name in resources) {\n      this[utils.pascalToCamelCase(name)] = new resources[name](this);\n    }\n  },\n\n  /**\n   * @private\n   * This may be removed in the future.\n   */\n  _getPropsFromConfig(config) {\n    // If config is null or undefined, just bail early with no props\n    if (!config) {\n      return {};\n    } // config can be an object or a string\n\n\n    const isString = typeof config === 'string';\n    const isObject = config === Object(config) && !Array.isArray(config);\n\n    if (!isObject && !isString) {\n      throw new Error('Config must either be an object or a string');\n    } // If config is a string, we assume the old behavior of passing in a string representation of the api version\n\n\n    if (isString) {\n      return {\n        apiVersion: config\n      };\n    } // If config is an object, we assume the new behavior and make sure it doesn't contain any unexpected values\n\n\n    const values = Object.keys(config).filter(value => !ALLOWED_CONFIG_PROPERTIES.includes(value));\n\n    if (values.length > 0) {\n      throw new Error(`Config object may only contain the following: ${ALLOWED_CONFIG_PROPERTIES.join(', ')}`);\n    }\n\n    return config;\n  }\n\n};\nmodule.exports = Stripe; // expose constructor as a named property to enable mocking with Sinon.JS\n\nmodule.exports.Stripe = Stripe; // Allow use with the TypeScript compiler without `esModuleInterop`.\n// We may also want to add `Object.defineProperty(exports, \"__esModule\", {value: true});` in the future, so that Babel users will use the `default` version.\n\nmodule.exports.default = Stripe;","map":{"version":3,"names":["resources","require","DEFAULT_HOST","DEFAULT_PORT","DEFAULT_BASE_PATH","DEFAULT_API_VERSION","DEFAULT_TIMEOUT","Stripe","PACKAGE_VERSION","version","utils","determineProcessUserAgentProperties","emitWarning","USER_AGENT","bindings_version","lang","publisher","uname","typescript","_UNAME_CACHE","MAX_NETWORK_RETRY_DELAY_SEC","INITIAL_NETWORK_RETRY_DELAY_SEC","APP_INFO_PROPERTIES","ALLOWED_CONFIG_PROPERTIES","EventEmitter","StripeResource","HttpClient","HttpClientResponse","CryptoProvider","key","config","props","_getPropsFromConfig","Object","defineProperty","value","enumerable","configurable","writable","VERSION","on","_emitter","bind","once","off","removeListener","protocol","host","test","Error","agent","httpAgent","_api","auth","port","basePath","apiVersion","timeout","validateInteger","maxNetworkRetries","httpClient","createNodeHttpClient","dev","stripeAccount","appInfo","_setAppInfo","_prepResources","_setApiKey","errors","webhooks","_prevRequestMetrics","_enableTelemetry","telemetry","NodeHttpClient","createFetchHttpClient","fetchFn","FetchHttpClient","createNodeCryptoProvider","NodeCryptoProvider","createSubtleCryptoProvider","subtleCrypto","SubtleCryptoProvider","prototype","setHost","_setApiField","setPort","setProtocol","toLowerCase","setApiVersion","setApiKey","setTimeout","setAppInfo","info","name","reduce","accum","prop","undefined","_appInfo","setHttpAgent","getApiField","setClientId","clientId","_clientId","getClientId","getConstant","c","getMaxNetworkRetries","setMaxNetworkRetries","_setApiNumberField","n","defaultVal","val","getMaxNetworkRetryDelay","getInitialNetworkRetryDelay","getUname","cb","Promise","resolve","safeExec","err","then","getClientUserAgent","getClientUserAgentSeeded","seed","userAgent","field","encodeURIComponent","client","httplib","getClientName","application","JSON","stringify","getAppInfoAsString","formatted","url","setTelemetryEnabled","enableTelemetry","getTelemetryEnabled","pascalToCamelCase","isString","isObject","Array","isArray","values","keys","filter","includes","length","join","module","exports","default"],"sources":["/Users/joris/Library/Mobile Documents/com~apple~CloudDocs/OneDrive v1/34. Projects/stripe-prebuilt/node_modules/stripe/lib/stripe.js"],"sourcesContent":["'use strict';\n\nconst resources = require('./resources');\n\nconst DEFAULT_HOST = 'api.stripe.com';\nconst DEFAULT_PORT = '443';\nconst DEFAULT_BASE_PATH = '/v1/';\nconst DEFAULT_API_VERSION = null;\n\nconst DEFAULT_TIMEOUT = 80000;\n\nStripe.PACKAGE_VERSION = require('../package.json').version;\n\nconst utils = require('./utils');\nconst {determineProcessUserAgentProperties, emitWarning} = utils;\n\nStripe.USER_AGENT = {\n  bindings_version: Stripe.PACKAGE_VERSION,\n  lang: 'node',\n  publisher: 'stripe',\n  uname: null,\n  typescript: false,\n  ...determineProcessUserAgentProperties(),\n};\n\n/** @private */\nStripe._UNAME_CACHE = null;\n\nconst MAX_NETWORK_RETRY_DELAY_SEC = 2;\nconst INITIAL_NETWORK_RETRY_DELAY_SEC = 0.5;\n\nconst APP_INFO_PROPERTIES = ['name', 'version', 'url', 'partner_id'];\nconst ALLOWED_CONFIG_PROPERTIES = [\n  'apiVersion',\n  'typescript',\n  'maxNetworkRetries',\n  'httpAgent',\n  'httpClient',\n  'timeout',\n  'host',\n  'port',\n  'protocol',\n  'telemetry',\n  'appInfo',\n  'stripeAccount',\n];\n\nconst EventEmitter = require('events').EventEmitter;\n\nStripe.StripeResource = require('./StripeResource');\nStripe.resources = resources;\n\nconst {HttpClient, HttpClientResponse} = require('./net/HttpClient');\nStripe.HttpClient = HttpClient;\nStripe.HttpClientResponse = HttpClientResponse;\n\nconst CryptoProvider = require('./crypto/CryptoProvider');\nStripe.CryptoProvider = CryptoProvider;\n\nfunction Stripe(key, config = {}) {\n  if (!(this instanceof Stripe)) {\n    return new Stripe(key, config);\n  }\n\n  const props = this._getPropsFromConfig(config);\n\n  Object.defineProperty(this, '_emitter', {\n    value: new EventEmitter(),\n    enumerable: false,\n    configurable: false,\n    writable: false,\n  });\n\n  this.VERSION = Stripe.PACKAGE_VERSION;\n\n  this.on = this._emitter.on.bind(this._emitter);\n  this.once = this._emitter.once.bind(this._emitter);\n  this.off = this._emitter.removeListener.bind(this._emitter);\n\n  if (\n    props.protocol &&\n    props.protocol !== 'https' &&\n    (!props.host || /\\.stripe\\.com$/.test(props.host))\n  ) {\n    throw new Error(\n      'The `https` protocol must be used when sending requests to `*.stripe.com`'\n    );\n  }\n\n  const agent = props.httpAgent || null;\n\n  this._api = {\n    auth: null,\n    host: props.host || DEFAULT_HOST,\n    port: props.port || DEFAULT_PORT,\n    protocol: props.protocol || 'https',\n    basePath: DEFAULT_BASE_PATH,\n    version: props.apiVersion || DEFAULT_API_VERSION,\n    timeout: utils.validateInteger('timeout', props.timeout, DEFAULT_TIMEOUT),\n    maxNetworkRetries: utils.validateInteger(\n      'maxNetworkRetries',\n      props.maxNetworkRetries,\n      0\n    ),\n    agent: agent,\n    httpClient: props.httpClient || Stripe.createNodeHttpClient(agent),\n    dev: false,\n    stripeAccount: props.stripeAccount || null,\n  };\n\n  const typescript = props.typescript || false;\n  if (typescript !== Stripe.USER_AGENT.typescript) {\n    // The mutation here is uncomfortable, but likely fastest;\n    // serializing the user agent involves shelling out to the system,\n    // and given some users may instantiate the library many times without switching between TS and non-TS,\n    // we only want to incur the performance hit when that actually happens.\n    Stripe.USER_AGENT.typescript = typescript;\n  }\n\n  if (props.appInfo) {\n    this._setAppInfo(props.appInfo);\n  }\n\n  this._prepResources();\n  this._setApiKey(key);\n\n  this.errors = require('./Error');\n  this.webhooks = require('./Webhooks');\n\n  this._prevRequestMetrics = [];\n  this._enableTelemetry = props.telemetry !== false;\n\n  // Expose StripeResource on the instance too\n  this.StripeResource = Stripe.StripeResource;\n}\n\nStripe.errors = require('./Error');\nStripe.webhooks = require('./Webhooks');\n\nStripe.createNodeHttpClient = (agent) => {\n  const {NodeHttpClient} = require('./net/NodeHttpClient');\n  return new NodeHttpClient(agent);\n};\n\n/**\n * Creates an HTTP client for issuing Stripe API requests which uses the Web\n * Fetch API.\n *\n * A fetch function can optionally be passed in as a parameter. If none is\n * passed, will default to the default `fetch` function in the global scope.\n */\nStripe.createFetchHttpClient = (fetchFn) => {\n  const {FetchHttpClient} = require('./net/FetchHttpClient');\n  return new FetchHttpClient(fetchFn);\n};\n\n/**\n * Create a CryptoProvider which uses the built-in Node crypto libraries for\n * its crypto operations.\n */\nStripe.createNodeCryptoProvider = () => {\n  const NodeCryptoProvider = require('./crypto/NodeCryptoProvider');\n  return new NodeCryptoProvider();\n};\n\n/**\n * Creates a CryptoProvider which uses the Subtle Crypto API from the Web\n * Crypto API spec for its crypto operations.\n *\n * A SubtleCrypto interface can optionally be passed in as a parameter. If none\n * is passed, will default to the default `crypto.subtle` object in the global\n * scope.\n */\nStripe.createSubtleCryptoProvider = (subtleCrypto) => {\n  const SubtleCryptoProvider = require('./crypto/SubtleCryptoProvider');\n  return new SubtleCryptoProvider(subtleCrypto);\n};\n\nStripe.prototype = {\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   host: 'example.com',\n   *   port: '8080',\n   *   protocol: 'http',\n   * });\n   *\n   */\n  setHost(host, port, protocol) {\n    emitWarning(\n      '`setHost` is deprecated. Use the `host` config option instead.'\n    );\n    this._setApiField('host', host);\n    if (port) {\n      this.setPort(port);\n    }\n    if (protocol) {\n      this.setProtocol(protocol);\n    }\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   protocol: 'http',\n   * });\n   *\n   */\n  setProtocol(protocol) {\n    emitWarning(\n      '`setProtocol` is deprecated. Use the `protocol` config option instead.'\n    );\n    this._setApiField('protocol', protocol.toLowerCase());\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   port: 3000,\n   * });\n   *\n   */\n  setPort(port) {\n    emitWarning(\n      '`setPort` is deprecated. Use the `port` config option instead.'\n    );\n    this._setApiField('port', port);\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   apiVersion: API_VERSION,\n   * });\n   *\n   */\n  setApiVersion(version) {\n    emitWarning(\n      '`setApiVersion` is deprecated. Use the `apiVersion` config or request option instead.'\n    );\n    if (version) {\n      this._setApiField('version', version);\n    }\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY);\n   *\n   * Or, for Stripe Connect, use `stripeAccount` instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   stripeAccount: 'acct_...',\n   * });\n   *\n   * Or, to use a different apiKey on a given request:\n   *\n   * stripe.customers.create(params, {apiKey: 'sk_test_...'});\n   */\n  setApiKey(key) {\n    emitWarning(\n      '`setApiKey` is deprecated. Use the `apiKey` request option instead.'\n    );\n    this._setApiKey(key);\n  },\n\n  /**\n   * @private\n   */\n  _setApiKey(key) {\n    if (key) {\n      this._setApiField('auth', `Bearer ${key}`);\n    }\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   timeout: TIMEOUT_MS,\n   * });\n   */\n  setTimeout(timeout) {\n    emitWarning(\n      '`setTimeout` is deprecated. Use the `timeout` config or request option instead.'\n    );\n    this._setApiField('timeout', timeout == null ? DEFAULT_TIMEOUT : timeout);\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   appInfo: {\n   *     name: 'MyPlugin',\n   *     version: '1.4.2',\n   *     url: 'https://myplugin.com',\n   *     partner_id: '1234',\n   *   },\n   * });\n   */\n  setAppInfo(info) {\n    emitWarning(\n      '`setAppInfo` is deprecated. Use the `appInfo` config option instead.'\n    );\n    this._setAppInfo(info);\n  },\n\n  /**\n   * @private\n   * This may be removed in the future.\n   */\n  _setAppInfo(info) {\n    if (info && typeof info !== 'object') {\n      throw new Error('AppInfo must be an object.');\n    }\n\n    if (info && !info.name) {\n      throw new Error('AppInfo.name is required');\n    }\n\n    info = info || {};\n\n    const appInfo = APP_INFO_PROPERTIES.reduce((accum, prop) => {\n      if (typeof info[prop] == 'string') {\n        accum = accum || {};\n\n        accum[prop] = info[prop];\n      }\n\n      return accum;\n    }, undefined);\n\n    this._appInfo = appInfo;\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const ProxyAgent = require('https-proxy-agent');\n   * const stripe = new Stripe(API_KEY, {\n   *   httpAgent: new ProxyAgent(process.env.http_proxy),\n   * });\n   *\n   */\n  setHttpAgent(agent) {\n    emitWarning(\n      '`setHttpAgent` is deprecated. Use the `httpAgent` config option instead.'\n    );\n    this._setApiField('agent', agent);\n  },\n\n  /**\n   * @private\n   * This may be removed in the future.\n   */\n  _setApiField(key, value) {\n    this._api[key] = value;\n  },\n\n  /**\n   * @private\n   * Please open or upvote an issue at github.com/stripe/stripe-node\n   * if you use this, detailing your use-case.\n   *\n   * It may be deprecated and removed in the future.\n   */\n  getApiField(key) {\n    return this._api[key];\n  },\n\n  setClientId(clientId) {\n    this._clientId = clientId;\n  },\n\n  getClientId() {\n    return this._clientId;\n  },\n\n  /**\n   * @private\n   * Please open or upvote an issue at github.com/stripe/stripe-node\n   * if you use this, detailing your use-case.\n   *\n   * It may be deprecated and removed in the future.\n   */\n  getConstant: (c) => {\n    switch (c) {\n      case 'DEFAULT_HOST':\n        return DEFAULT_HOST;\n      case 'DEFAULT_PORT':\n        return DEFAULT_PORT;\n      case 'DEFAULT_BASE_PATH':\n        return DEFAULT_BASE_PATH;\n      case 'DEFAULT_API_VERSION':\n        return DEFAULT_API_VERSION;\n      case 'DEFAULT_TIMEOUT':\n        return DEFAULT_TIMEOUT;\n      case 'MAX_NETWORK_RETRY_DELAY_SEC':\n        return MAX_NETWORK_RETRY_DELAY_SEC;\n      case 'INITIAL_NETWORK_RETRY_DELAY_SEC':\n        return INITIAL_NETWORK_RETRY_DELAY_SEC;\n    }\n    return Stripe[c];\n  },\n\n  getMaxNetworkRetries() {\n    return this.getApiField('maxNetworkRetries');\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   maxNetworkRetries: 2,\n   * });\n   *\n   */\n  setMaxNetworkRetries(maxNetworkRetries) {\n    this._setApiNumberField('maxNetworkRetries', maxNetworkRetries);\n  },\n\n  /**\n   * @private\n   * This may be removed in the future.\n   */\n  _setApiNumberField(prop, n, defaultVal) {\n    const val = utils.validateInteger(prop, n, defaultVal);\n\n    this._setApiField(prop, val);\n  },\n\n  getMaxNetworkRetryDelay() {\n    return MAX_NETWORK_RETRY_DELAY_SEC;\n  },\n\n  getInitialNetworkRetryDelay() {\n    return INITIAL_NETWORK_RETRY_DELAY_SEC;\n  },\n\n  /**\n   * @private\n   */\n  getUname(cb) {\n    if (!Stripe._UNAME_CACHE) {\n      Stripe._UNAME_CACHE = new Promise((resolve) => {\n        utils.safeExec('uname -a', (err, uname) => {\n          resolve(uname);\n        });\n      });\n    }\n    Stripe._UNAME_CACHE.then((uname) => cb(uname));\n  },\n\n  /**\n   * @private\n   * Please open or upvote an issue at github.com/stripe/stripe-node\n   * if you use this, detailing your use-case.\n   *\n   * It may be deprecated and removed in the future.\n   *\n   * Gets a JSON version of a User-Agent and uses a cached version for a slight\n   * speed advantage.\n   */\n  getClientUserAgent(cb) {\n    return this.getClientUserAgentSeeded(Stripe.USER_AGENT, cb);\n  },\n\n  /**\n   * @private\n   * Please open or upvote an issue at github.com/stripe/stripe-node\n   * if you use this, detailing your use-case.\n   *\n   * It may be deprecated and removed in the future.\n   *\n   * Gets a JSON version of a User-Agent by encoding a seeded object and\n   * fetching a uname from the system.\n   */\n  getClientUserAgentSeeded(seed, cb) {\n    this.getUname((uname) => {\n      const userAgent = {};\n      for (const field in seed) {\n        userAgent[field] = encodeURIComponent(seed[field]);\n      }\n\n      // URI-encode in case there are unusual characters in the system's uname.\n      userAgent.uname = encodeURIComponent(uname || 'UNKNOWN');\n\n      const client = this.getApiField('httpClient');\n      if (client) {\n        userAgent.httplib = encodeURIComponent(client.getClientName());\n      }\n\n      if (this._appInfo) {\n        userAgent.application = this._appInfo;\n      }\n\n      cb(JSON.stringify(userAgent));\n    });\n  },\n\n  /**\n   * @private\n   * Please open or upvote an issue at github.com/stripe/stripe-node\n   * if you use this, detailing your use-case.\n   *\n   * It may be deprecated and removed in the future.\n   */\n  getAppInfoAsString() {\n    if (!this._appInfo) {\n      return '';\n    }\n\n    let formatted = this._appInfo.name;\n\n    if (this._appInfo.version) {\n      formatted += `/${this._appInfo.version}`;\n    }\n\n    if (this._appInfo.url) {\n      formatted += ` (${this._appInfo.url})`;\n    }\n\n    return formatted;\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   telemetry: false,\n   * });\n   *\n   */\n  setTelemetryEnabled(enableTelemetry) {\n    emitWarning(\n      '`setTelemetryEnabled` is deprecated. Use the `telemetry` config option instead.'\n    );\n    this._enableTelemetry = enableTelemetry;\n  },\n\n  getTelemetryEnabled() {\n    return this._enableTelemetry;\n  },\n\n  /**\n   * @private\n   * This may be removed in the future.\n   */\n  _prepResources() {\n    for (const name in resources) {\n      this[utils.pascalToCamelCase(name)] = new resources[name](this);\n    }\n  },\n\n  /**\n   * @private\n   * This may be removed in the future.\n   */\n  _getPropsFromConfig(config) {\n    // If config is null or undefined, just bail early with no props\n    if (!config) {\n      return {};\n    }\n\n    // config can be an object or a string\n    const isString = typeof config === 'string';\n    const isObject = config === Object(config) && !Array.isArray(config);\n\n    if (!isObject && !isString) {\n      throw new Error('Config must either be an object or a string');\n    }\n\n    // If config is a string, we assume the old behavior of passing in a string representation of the api version\n    if (isString) {\n      return {\n        apiVersion: config,\n      };\n    }\n\n    // If config is an object, we assume the new behavior and make sure it doesn't contain any unexpected values\n    const values = Object.keys(config).filter(\n      (value) => !ALLOWED_CONFIG_PROPERTIES.includes(value)\n    );\n\n    if (values.length > 0) {\n      throw new Error(\n        `Config object may only contain the following: ${ALLOWED_CONFIG_PROPERTIES.join(\n          ', '\n        )}`\n      );\n    }\n\n    return config;\n  },\n};\n\nmodule.exports = Stripe;\n\n// expose constructor as a named property to enable mocking with Sinon.JS\nmodule.exports.Stripe = Stripe;\n\n// Allow use with the TypeScript compiler without `esModuleInterop`.\n// We may also want to add `Object.defineProperty(exports, \"__esModule\", {value: true});` in the future, so that Babel users will use the `default` version.\nmodule.exports.default = Stripe;\n"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAzB;;AAEA,MAAMC,YAAY,GAAG,gBAArB;AACA,MAAMC,YAAY,GAAG,KAArB;AACA,MAAMC,iBAAiB,GAAG,MAA1B;AACA,MAAMC,mBAAmB,GAAG,IAA5B;AAEA,MAAMC,eAAe,GAAG,KAAxB;AAEAC,MAAM,CAACC,eAAP,GAAyBP,OAAO,CAAC,iBAAD,CAAP,CAA2BQ,OAApD;;AAEA,MAAMC,KAAK,GAAGT,OAAO,CAAC,SAAD,CAArB;;AACA,MAAM;EAACU,mCAAD;EAAsCC;AAAtC,IAAqDF,KAA3D;AAEAH,MAAM,CAACM,UAAP,GAAoB;EAClBC,gBAAgB,EAAEP,MAAM,CAACC,eADP;EAElBO,IAAI,EAAE,MAFY;EAGlBC,SAAS,EAAE,QAHO;EAIlBC,KAAK,EAAE,IAJW;EAKlBC,UAAU,EAAE,KALM;EAMlB,GAAGP,mCAAmC;AANpB,CAApB;AASA;;AACAJ,MAAM,CAACY,YAAP,GAAsB,IAAtB;AAEA,MAAMC,2BAA2B,GAAG,CAApC;AACA,MAAMC,+BAA+B,GAAG,GAAxC;AAEA,MAAMC,mBAAmB,GAAG,CAAC,MAAD,EAAS,SAAT,EAAoB,KAApB,EAA2B,YAA3B,CAA5B;AACA,MAAMC,yBAAyB,GAAG,CAChC,YADgC,EAEhC,YAFgC,EAGhC,mBAHgC,EAIhC,WAJgC,EAKhC,YALgC,EAMhC,SANgC,EAOhC,MAPgC,EAQhC,MARgC,EAShC,UATgC,EAUhC,WAVgC,EAWhC,SAXgC,EAYhC,eAZgC,CAAlC;;AAeA,MAAMC,YAAY,GAAGvB,OAAO,CAAC,QAAD,CAAP,CAAkBuB,YAAvC;;AAEAjB,MAAM,CAACkB,cAAP,GAAwBxB,OAAO,CAAC,kBAAD,CAA/B;AACAM,MAAM,CAACP,SAAP,GAAmBA,SAAnB;;AAEA,MAAM;EAAC0B,UAAD;EAAaC;AAAb,IAAmC1B,OAAO,CAAC,kBAAD,CAAhD;;AACAM,MAAM,CAACmB,UAAP,GAAoBA,UAApB;AACAnB,MAAM,CAACoB,kBAAP,GAA4BA,kBAA5B;;AAEA,MAAMC,cAAc,GAAG3B,OAAO,CAAC,yBAAD,CAA9B;;AACAM,MAAM,CAACqB,cAAP,GAAwBA,cAAxB;;AAEA,SAASrB,MAAT,CAAgBsB,GAAhB,EAAkC;EAAA,IAAbC,MAAa,uEAAJ,EAAI;;EAChC,IAAI,EAAE,gBAAgBvB,MAAlB,CAAJ,EAA+B;IAC7B,OAAO,IAAIA,MAAJ,CAAWsB,GAAX,EAAgBC,MAAhB,CAAP;EACD;;EAED,MAAMC,KAAK,GAAG,KAAKC,mBAAL,CAAyBF,MAAzB,CAAd;;EAEAG,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,UAA5B,EAAwC;IACtCC,KAAK,EAAE,IAAIX,YAAJ,EAD+B;IAEtCY,UAAU,EAAE,KAF0B;IAGtCC,YAAY,EAAE,KAHwB;IAItCC,QAAQ,EAAE;EAJ4B,CAAxC;EAOA,KAAKC,OAAL,GAAehC,MAAM,CAACC,eAAtB;EAEA,KAAKgC,EAAL,GAAU,KAAKC,QAAL,CAAcD,EAAd,CAAiBE,IAAjB,CAAsB,KAAKD,QAA3B,CAAV;EACA,KAAKE,IAAL,GAAY,KAAKF,QAAL,CAAcE,IAAd,CAAmBD,IAAnB,CAAwB,KAAKD,QAA7B,CAAZ;EACA,KAAKG,GAAL,GAAW,KAAKH,QAAL,CAAcI,cAAd,CAA6BH,IAA7B,CAAkC,KAAKD,QAAvC,CAAX;;EAEA,IACEV,KAAK,CAACe,QAAN,IACAf,KAAK,CAACe,QAAN,KAAmB,OADnB,KAEC,CAACf,KAAK,CAACgB,IAAP,IAAe,iBAAiBC,IAAjB,CAAsBjB,KAAK,CAACgB,IAA5B,CAFhB,CADF,EAIE;IACA,MAAM,IAAIE,KAAJ,CACJ,2EADI,CAAN;EAGD;;EAED,MAAMC,KAAK,GAAGnB,KAAK,CAACoB,SAAN,IAAmB,IAAjC;EAEA,KAAKC,IAAL,GAAY;IACVC,IAAI,EAAE,IADI;IAEVN,IAAI,EAAEhB,KAAK,CAACgB,IAAN,IAAc7C,YAFV;IAGVoD,IAAI,EAAEvB,KAAK,CAACuB,IAAN,IAAcnD,YAHV;IAIV2C,QAAQ,EAAEf,KAAK,CAACe,QAAN,IAAkB,OAJlB;IAKVS,QAAQ,EAAEnD,iBALA;IAMVK,OAAO,EAAEsB,KAAK,CAACyB,UAAN,IAAoBnD,mBANnB;IAOVoD,OAAO,EAAE/C,KAAK,CAACgD,eAAN,CAAsB,SAAtB,EAAiC3B,KAAK,CAAC0B,OAAvC,EAAgDnD,eAAhD,CAPC;IAQVqD,iBAAiB,EAAEjD,KAAK,CAACgD,eAAN,CACjB,mBADiB,EAEjB3B,KAAK,CAAC4B,iBAFW,EAGjB,CAHiB,CART;IAaVT,KAAK,EAAEA,KAbG;IAcVU,UAAU,EAAE7B,KAAK,CAAC6B,UAAN,IAAoBrD,MAAM,CAACsD,oBAAP,CAA4BX,KAA5B,CAdtB;IAeVY,GAAG,EAAE,KAfK;IAgBVC,aAAa,EAAEhC,KAAK,CAACgC,aAAN,IAAuB;EAhB5B,CAAZ;EAmBA,MAAM7C,UAAU,GAAGa,KAAK,CAACb,UAAN,IAAoB,KAAvC;;EACA,IAAIA,UAAU,KAAKX,MAAM,CAACM,UAAP,CAAkBK,UAArC,EAAiD;IAC/C;IACA;IACA;IACA;IACAX,MAAM,CAACM,UAAP,CAAkBK,UAAlB,GAA+BA,UAA/B;EACD;;EAED,IAAIa,KAAK,CAACiC,OAAV,EAAmB;IACjB,KAAKC,WAAL,CAAiBlC,KAAK,CAACiC,OAAvB;EACD;;EAED,KAAKE,cAAL;;EACA,KAAKC,UAAL,CAAgBtC,GAAhB;;EAEA,KAAKuC,MAAL,GAAcnE,OAAO,CAAC,SAAD,CAArB;EACA,KAAKoE,QAAL,GAAgBpE,OAAO,CAAC,YAAD,CAAvB;EAEA,KAAKqE,mBAAL,GAA2B,EAA3B;EACA,KAAKC,gBAAL,GAAwBxC,KAAK,CAACyC,SAAN,KAAoB,KAA5C,CAvEgC,CAyEhC;;EACA,KAAK/C,cAAL,GAAsBlB,MAAM,CAACkB,cAA7B;AACD;;AAEDlB,MAAM,CAAC6D,MAAP,GAAgBnE,OAAO,CAAC,SAAD,CAAvB;AACAM,MAAM,CAAC8D,QAAP,GAAkBpE,OAAO,CAAC,YAAD,CAAzB;;AAEAM,MAAM,CAACsD,oBAAP,GAA+BX,KAAD,IAAW;EACvC,MAAM;IAACuB;EAAD,IAAmBxE,OAAO,CAAC,sBAAD,CAAhC;;EACA,OAAO,IAAIwE,cAAJ,CAAmBvB,KAAnB,CAAP;AACD,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA3C,MAAM,CAACmE,qBAAP,GAAgCC,OAAD,IAAa;EAC1C,MAAM;IAACC;EAAD,IAAoB3E,OAAO,CAAC,uBAAD,CAAjC;;EACA,OAAO,IAAI2E,eAAJ,CAAoBD,OAApB,CAAP;AACD,CAHD;AAKA;AACA;AACA;AACA;;;AACApE,MAAM,CAACsE,wBAAP,GAAkC,MAAM;EACtC,MAAMC,kBAAkB,GAAG7E,OAAO,CAAC,6BAAD,CAAlC;;EACA,OAAO,IAAI6E,kBAAJ,EAAP;AACD,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAvE,MAAM,CAACwE,0BAAP,GAAqCC,YAAD,IAAkB;EACpD,MAAMC,oBAAoB,GAAGhF,OAAO,CAAC,+BAAD,CAApC;;EACA,OAAO,IAAIgF,oBAAJ,CAAyBD,YAAzB,CAAP;AACD,CAHD;;AAKAzE,MAAM,CAAC2E,SAAP,GAAmB;EACjB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,OAAO,CAACpC,IAAD,EAAOO,IAAP,EAAaR,QAAb,EAAuB;IAC5BlC,WAAW,CACT,gEADS,CAAX;;IAGA,KAAKwE,YAAL,CAAkB,MAAlB,EAA0BrC,IAA1B;;IACA,IAAIO,IAAJ,EAAU;MACR,KAAK+B,OAAL,CAAa/B,IAAb;IACD;;IACD,IAAIR,QAAJ,EAAc;MACZ,KAAKwC,WAAL,CAAiBxC,QAAjB;IACD;EACF,CAtBgB;;EAwBjB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEwC,WAAW,CAACxC,QAAD,EAAW;IACpBlC,WAAW,CACT,wEADS,CAAX;;IAGA,KAAKwE,YAAL,CAAkB,UAAlB,EAA8BtC,QAAQ,CAACyC,WAAT,EAA9B;EACD,CArCgB;;EAuCjB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEF,OAAO,CAAC/B,IAAD,EAAO;IACZ1C,WAAW,CACT,gEADS,CAAX;;IAGA,KAAKwE,YAAL,CAAkB,MAAlB,EAA0B9B,IAA1B;EACD,CApDgB;;EAsDjB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEkC,aAAa,CAAC/E,OAAD,EAAU;IACrBG,WAAW,CACT,uFADS,CAAX;;IAGA,IAAIH,OAAJ,EAAa;MACX,KAAK2E,YAAL,CAAkB,SAAlB,EAA6B3E,OAA7B;IACD;EACF,CArEgB;;EAuEjB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEgF,SAAS,CAAC5D,GAAD,EAAM;IACbjB,WAAW,CACT,qEADS,CAAX;;IAGA,KAAKuD,UAAL,CAAgBtC,GAAhB;EACD,CA3FgB;;EA6FjB;AACF;AACA;EACEsC,UAAU,CAACtC,GAAD,EAAM;IACd,IAAIA,GAAJ,EAAS;MACP,KAAKuD,YAAL,CAAkB,MAAlB,EAA2B,UAASvD,GAAI,EAAxC;IACD;EACF,CApGgB;;EAsGjB;AACF;AACA;AACA;AACA;AACA;AACA;EACE6D,UAAU,CAACjC,OAAD,EAAU;IAClB7C,WAAW,CACT,iFADS,CAAX;;IAGA,KAAKwE,YAAL,CAAkB,SAAlB,EAA6B3B,OAAO,IAAI,IAAX,GAAkBnD,eAAlB,GAAoCmD,OAAjE;EACD,CAlHgB;;EAoHjB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEkC,UAAU,CAACC,IAAD,EAAO;IACfhF,WAAW,CACT,sEADS,CAAX;;IAGA,KAAKqD,WAAL,CAAiB2B,IAAjB;EACD,CArIgB;;EAuIjB;AACF;AACA;AACA;EACE3B,WAAW,CAAC2B,IAAD,EAAO;IAChB,IAAIA,IAAI,IAAI,OAAOA,IAAP,KAAgB,QAA5B,EAAsC;MACpC,MAAM,IAAI3C,KAAJ,CAAU,4BAAV,CAAN;IACD;;IAED,IAAI2C,IAAI,IAAI,CAACA,IAAI,CAACC,IAAlB,EAAwB;MACtB,MAAM,IAAI5C,KAAJ,CAAU,0BAAV,CAAN;IACD;;IAED2C,IAAI,GAAGA,IAAI,IAAI,EAAf;IAEA,MAAM5B,OAAO,GAAG1C,mBAAmB,CAACwE,MAApB,CAA2B,CAACC,KAAD,EAAQC,IAAR,KAAiB;MAC1D,IAAI,OAAOJ,IAAI,CAACI,IAAD,CAAX,IAAqB,QAAzB,EAAmC;QACjCD,KAAK,GAAGA,KAAK,IAAI,EAAjB;QAEAA,KAAK,CAACC,IAAD,CAAL,GAAcJ,IAAI,CAACI,IAAD,CAAlB;MACD;;MAED,OAAOD,KAAP;IACD,CARe,EAQbE,SARa,CAAhB;IAUA,KAAKC,QAAL,GAAgBlC,OAAhB;EACD,CAjKgB;;EAmKjB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEmC,YAAY,CAACjD,KAAD,EAAQ;IAClBtC,WAAW,CACT,0EADS,CAAX;;IAGA,KAAKwE,YAAL,CAAkB,OAAlB,EAA2BlC,KAA3B;EACD,CAjLgB;;EAmLjB;AACF;AACA;AACA;EACEkC,YAAY,CAACvD,GAAD,EAAMM,KAAN,EAAa;IACvB,KAAKiB,IAAL,CAAUvB,GAAV,IAAiBM,KAAjB;EACD,CAzLgB;;EA2LjB;AACF;AACA;AACA;AACA;AACA;AACA;EACEiE,WAAW,CAACvE,GAAD,EAAM;IACf,OAAO,KAAKuB,IAAL,CAAUvB,GAAV,CAAP;EACD,CApMgB;;EAsMjBwE,WAAW,CAACC,QAAD,EAAW;IACpB,KAAKC,SAAL,GAAiBD,QAAjB;EACD,CAxMgB;;EA0MjBE,WAAW,GAAG;IACZ,OAAO,KAAKD,SAAZ;EACD,CA5MgB;;EA8MjB;AACF;AACA;AACA;AACA;AACA;AACA;EACEE,WAAW,EAAGC,CAAD,IAAO;IAClB,QAAQA,CAAR;MACE,KAAK,cAAL;QACE,OAAOxG,YAAP;;MACF,KAAK,cAAL;QACE,OAAOC,YAAP;;MACF,KAAK,mBAAL;QACE,OAAOC,iBAAP;;MACF,KAAK,qBAAL;QACE,OAAOC,mBAAP;;MACF,KAAK,iBAAL;QACE,OAAOC,eAAP;;MACF,KAAK,6BAAL;QACE,OAAOc,2BAAP;;MACF,KAAK,iCAAL;QACE,OAAOC,+BAAP;IAdJ;;IAgBA,OAAOd,MAAM,CAACmG,CAAD,CAAb;EACD,CAvOgB;;EAyOjBC,oBAAoB,GAAG;IACrB,OAAO,KAAKP,WAAL,CAAiB,mBAAjB,CAAP;EACD,CA3OgB;;EA6OjB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEQ,oBAAoB,CAACjD,iBAAD,EAAoB;IACtC,KAAKkD,kBAAL,CAAwB,mBAAxB,EAA6ClD,iBAA7C;EACD,CAvPgB;;EAyPjB;AACF;AACA;AACA;EACEkD,kBAAkB,CAACb,IAAD,EAAOc,CAAP,EAAUC,UAAV,EAAsB;IACtC,MAAMC,GAAG,GAAGtG,KAAK,CAACgD,eAAN,CAAsBsC,IAAtB,EAA4Bc,CAA5B,EAA+BC,UAA/B,CAAZ;;IAEA,KAAK3B,YAAL,CAAkBY,IAAlB,EAAwBgB,GAAxB;EACD,CAjQgB;;EAmQjBC,uBAAuB,GAAG;IACxB,OAAO7F,2BAAP;EACD,CArQgB;;EAuQjB8F,2BAA2B,GAAG;IAC5B,OAAO7F,+BAAP;EACD,CAzQgB;;EA2QjB;AACF;AACA;EACE8F,QAAQ,CAACC,EAAD,EAAK;IACX,IAAI,CAAC7G,MAAM,CAACY,YAAZ,EAA0B;MACxBZ,MAAM,CAACY,YAAP,GAAsB,IAAIkG,OAAJ,CAAaC,OAAD,IAAa;QAC7C5G,KAAK,CAAC6G,QAAN,CAAe,UAAf,EAA2B,CAACC,GAAD,EAAMvG,KAAN,KAAgB;UACzCqG,OAAO,CAACrG,KAAD,CAAP;QACD,CAFD;MAGD,CAJqB,CAAtB;IAKD;;IACDV,MAAM,CAACY,YAAP,CAAoBsG,IAApB,CAA0BxG,KAAD,IAAWmG,EAAE,CAACnG,KAAD,CAAtC;EACD,CAvRgB;;EAyRjB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEyG,kBAAkB,CAACN,EAAD,EAAK;IACrB,OAAO,KAAKO,wBAAL,CAA8BpH,MAAM,CAACM,UAArC,EAAiDuG,EAAjD,CAAP;EACD,CArSgB;;EAuSjB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEO,wBAAwB,CAACC,IAAD,EAAOR,EAAP,EAAW;IACjC,KAAKD,QAAL,CAAelG,KAAD,IAAW;MACvB,MAAM4G,SAAS,GAAG,EAAlB;;MACA,KAAK,MAAMC,KAAX,IAAoBF,IAApB,EAA0B;QACxBC,SAAS,CAACC,KAAD,CAAT,GAAmBC,kBAAkB,CAACH,IAAI,CAACE,KAAD,CAAL,CAArC;MACD,CAJsB,CAMvB;;;MACAD,SAAS,CAAC5G,KAAV,GAAkB8G,kBAAkB,CAAC9G,KAAK,IAAI,SAAV,CAApC;MAEA,MAAM+G,MAAM,GAAG,KAAK5B,WAAL,CAAiB,YAAjB,CAAf;;MACA,IAAI4B,MAAJ,EAAY;QACVH,SAAS,CAACI,OAAV,GAAoBF,kBAAkB,CAACC,MAAM,CAACE,aAAP,EAAD,CAAtC;MACD;;MAED,IAAI,KAAKhC,QAAT,EAAmB;QACjB2B,SAAS,CAACM,WAAV,GAAwB,KAAKjC,QAA7B;MACD;;MAEDkB,EAAE,CAACgB,IAAI,CAACC,SAAL,CAAeR,SAAf,CAAD,CAAF;IACD,CAnBD;EAoBD,CAtUgB;;EAwUjB;AACF;AACA;AACA;AACA;AACA;AACA;EACES,kBAAkB,GAAG;IACnB,IAAI,CAAC,KAAKpC,QAAV,EAAoB;MAClB,OAAO,EAAP;IACD;;IAED,IAAIqC,SAAS,GAAG,KAAKrC,QAAL,CAAcL,IAA9B;;IAEA,IAAI,KAAKK,QAAL,CAAczF,OAAlB,EAA2B;MACzB8H,SAAS,IAAK,IAAG,KAAKrC,QAAL,CAAczF,OAAQ,EAAvC;IACD;;IAED,IAAI,KAAKyF,QAAL,CAAcsC,GAAlB,EAAuB;MACrBD,SAAS,IAAK,KAAI,KAAKrC,QAAL,CAAcsC,GAAI,GAApC;IACD;;IAED,OAAOD,SAAP;EACD,CA/VgB;;EAiWjB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEE,mBAAmB,CAACC,eAAD,EAAkB;IACnC9H,WAAW,CACT,iFADS,CAAX;IAGA,KAAK2D,gBAAL,GAAwBmE,eAAxB;EACD,CA9WgB;;EAgXjBC,mBAAmB,GAAG;IACpB,OAAO,KAAKpE,gBAAZ;EACD,CAlXgB;;EAoXjB;AACF;AACA;AACA;EACEL,cAAc,GAAG;IACf,KAAK,MAAM2B,IAAX,IAAmB7F,SAAnB,EAA8B;MAC5B,KAAKU,KAAK,CAACkI,iBAAN,CAAwB/C,IAAxB,CAAL,IAAsC,IAAI7F,SAAS,CAAC6F,IAAD,CAAb,CAAoB,IAApB,CAAtC;IACD;EACF,CA5XgB;;EA8XjB;AACF;AACA;AACA;EACE7D,mBAAmB,CAACF,MAAD,EAAS;IAC1B;IACA,IAAI,CAACA,MAAL,EAAa;MACX,OAAO,EAAP;IACD,CAJyB,CAM1B;;;IACA,MAAM+G,QAAQ,GAAG,OAAO/G,MAAP,KAAkB,QAAnC;IACA,MAAMgH,QAAQ,GAAGhH,MAAM,KAAKG,MAAM,CAACH,MAAD,CAAjB,IAA6B,CAACiH,KAAK,CAACC,OAAN,CAAclH,MAAd,CAA/C;;IAEA,IAAI,CAACgH,QAAD,IAAa,CAACD,QAAlB,EAA4B;MAC1B,MAAM,IAAI5F,KAAJ,CAAU,6CAAV,CAAN;IACD,CAZyB,CAc1B;;;IACA,IAAI4F,QAAJ,EAAc;MACZ,OAAO;QACLrF,UAAU,EAAE1B;MADP,CAAP;IAGD,CAnByB,CAqB1B;;;IACA,MAAMmH,MAAM,GAAGhH,MAAM,CAACiH,IAAP,CAAYpH,MAAZ,EAAoBqH,MAApB,CACZhH,KAAD,IAAW,CAACZ,yBAAyB,CAAC6H,QAA1B,CAAmCjH,KAAnC,CADC,CAAf;;IAIA,IAAI8G,MAAM,CAACI,MAAP,GAAgB,CAApB,EAAuB;MACrB,MAAM,IAAIpG,KAAJ,CACH,iDAAgD1B,yBAAyB,CAAC+H,IAA1B,CAC/C,IAD+C,CAE/C,EAHE,CAAN;IAKD;;IAED,OAAOxH,MAAP;EACD;;AAragB,CAAnB;AAwaAyH,MAAM,CAACC,OAAP,GAAiBjJ,MAAjB,C,CAEA;;AACAgJ,MAAM,CAACC,OAAP,CAAejJ,MAAf,GAAwBA,MAAxB,C,CAEA;AACA;;AACAgJ,MAAM,CAACC,OAAP,CAAeC,OAAf,GAAyBlJ,MAAzB"},"metadata":{},"sourceType":"script"}