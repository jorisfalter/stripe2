{"ast":null,"code":"'use strict';\n\nconst http = require('http');\n\nconst https = require('https');\n\nconst {\n  HttpClient,\n  HttpClientResponse\n} = require('./HttpClient');\n\nconst defaultHttpAgent = new http.Agent({\n  keepAlive: true\n});\nconst defaultHttpsAgent = new https.Agent({\n  keepAlive: true\n});\n/**\n * HTTP client which uses the Node `http` and `https` packages to issue\n * requests.`\n */\n\nclass NodeHttpClient extends HttpClient {\n  constructor(agent) {\n    super();\n    this._agent = agent;\n  }\n  /** @override. */\n\n\n  getClientName() {\n    return 'node';\n  }\n\n  makeRequest(host, port, path, method, headers, requestData, protocol, timeout) {\n    const isInsecureConnection = protocol === 'http';\n    let agent = this._agent;\n\n    if (!agent) {\n      agent = isInsecureConnection ? defaultHttpAgent : defaultHttpsAgent;\n    }\n\n    const requestPromise = new Promise((resolve, reject) => {\n      const req = (isInsecureConnection ? http : https).request({\n        host: host,\n        port: port,\n        path,\n        method,\n        agent,\n        headers,\n        ciphers: 'DEFAULT:!aNULL:!eNULL:!LOW:!EXPORT:!SSLv2:!MD5'\n      });\n      req.setTimeout(timeout, () => {\n        req.destroy(HttpClient.makeTimeoutError());\n      });\n      req.on('response', res => {\n        resolve(new NodeHttpClientResponse(res));\n      });\n      req.on('error', error => {\n        reject(error);\n      });\n      req.once('socket', socket => {\n        if (socket.connecting) {\n          socket.once(isInsecureConnection ? 'connect' : 'secureConnect', () => {\n            // Send payload; we're safe:\n            req.write(requestData);\n            req.end();\n          });\n        } else {\n          // we're already connected\n          req.write(requestData);\n          req.end();\n        }\n      });\n    });\n    return requestPromise;\n  }\n\n}\n\nclass NodeHttpClientResponse extends HttpClientResponse {\n  constructor(res) {\n    super(res.statusCode, res.headers || {});\n    this._res = res;\n  }\n\n  getRawResponse() {\n    return this._res;\n  }\n\n  toStream(streamCompleteCallback) {\n    // The raw response is itself the stream, so we just return that. To be\n    // backwards compatible, we should invoke the streamCompleteCallback only\n    // once the stream has been fully consumed.\n    this._res.once('end', () => streamCompleteCallback());\n\n    return this._res;\n  }\n\n  toJSON() {\n    return new Promise((resolve, reject) => {\n      let response = '';\n\n      this._res.setEncoding('utf8');\n\n      this._res.on('data', chunk => {\n        response += chunk;\n      });\n\n      this._res.once('end', () => {\n        try {\n          resolve(JSON.parse(response));\n        } catch (e) {\n          reject(e);\n        }\n      });\n    });\n  }\n\n}\n\nmodule.exports = {\n  NodeHttpClient,\n  NodeHttpClientResponse\n};","map":{"version":3,"names":["http","require","https","HttpClient","HttpClientResponse","defaultHttpAgent","Agent","keepAlive","defaultHttpsAgent","NodeHttpClient","constructor","agent","_agent","getClientName","makeRequest","host","port","path","method","headers","requestData","protocol","timeout","isInsecureConnection","requestPromise","Promise","resolve","reject","req","request","ciphers","setTimeout","destroy","makeTimeoutError","on","res","NodeHttpClientResponse","error","once","socket","connecting","write","end","statusCode","_res","getRawResponse","toStream","streamCompleteCallback","toJSON","response","setEncoding","chunk","JSON","parse","e","module","exports"],"sources":["/Users/joris/Library/Mobile Documents/com~apple~CloudDocs/OneDrive v1/34. Projects/stripe-prebuilt/node_modules/stripe/lib/net/NodeHttpClient.js"],"sourcesContent":["'use strict';\n\nconst http = require('http');\nconst https = require('https');\n\nconst {HttpClient, HttpClientResponse} = require('./HttpClient');\n\nconst defaultHttpAgent = new http.Agent({keepAlive: true});\nconst defaultHttpsAgent = new https.Agent({keepAlive: true});\n\n/**\n * HTTP client which uses the Node `http` and `https` packages to issue\n * requests.`\n */\nclass NodeHttpClient extends HttpClient {\n  constructor(agent) {\n    super();\n    this._agent = agent;\n  }\n\n  /** @override. */\n  getClientName() {\n    return 'node';\n  }\n\n  makeRequest(\n    host,\n    port,\n    path,\n    method,\n    headers,\n    requestData,\n    protocol,\n    timeout\n  ) {\n    const isInsecureConnection = protocol === 'http';\n\n    let agent = this._agent;\n    if (!agent) {\n      agent = isInsecureConnection ? defaultHttpAgent : defaultHttpsAgent;\n    }\n\n    const requestPromise = new Promise((resolve, reject) => {\n      const req = (isInsecureConnection ? http : https).request({\n        host: host,\n        port: port,\n        path,\n        method,\n        agent,\n        headers,\n        ciphers: 'DEFAULT:!aNULL:!eNULL:!LOW:!EXPORT:!SSLv2:!MD5',\n      });\n\n      req.setTimeout(timeout, () => {\n        req.destroy(HttpClient.makeTimeoutError());\n      });\n\n      req.on('response', (res) => {\n        resolve(new NodeHttpClientResponse(res));\n      });\n\n      req.on('error', (error) => {\n        reject(error);\n      });\n\n      req.once('socket', (socket) => {\n        if (socket.connecting) {\n          socket.once(\n            isInsecureConnection ? 'connect' : 'secureConnect',\n            () => {\n              // Send payload; we're safe:\n              req.write(requestData);\n              req.end();\n            }\n          );\n        } else {\n          // we're already connected\n          req.write(requestData);\n          req.end();\n        }\n      });\n    });\n\n    return requestPromise;\n  }\n}\n\nclass NodeHttpClientResponse extends HttpClientResponse {\n  constructor(res) {\n    super(res.statusCode, res.headers || {});\n    this._res = res;\n  }\n\n  getRawResponse() {\n    return this._res;\n  }\n\n  toStream(streamCompleteCallback) {\n    // The raw response is itself the stream, so we just return that. To be\n    // backwards compatible, we should invoke the streamCompleteCallback only\n    // once the stream has been fully consumed.\n    this._res.once('end', () => streamCompleteCallback());\n    return this._res;\n  }\n\n  toJSON() {\n    return new Promise((resolve, reject) => {\n      let response = '';\n\n      this._res.setEncoding('utf8');\n      this._res.on('data', (chunk) => {\n        response += chunk;\n      });\n      this._res.once('end', () => {\n        try {\n          resolve(JSON.parse(response));\n        } catch (e) {\n          reject(e);\n        }\n      });\n    });\n  }\n}\n\nmodule.exports = {NodeHttpClient, NodeHttpClientResponse};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}