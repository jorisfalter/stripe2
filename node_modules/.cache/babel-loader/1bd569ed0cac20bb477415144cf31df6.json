{"ast":null,"code":"'use strict';\n\nconst CryptoProvider = require('./CryptoProvider');\n/**\n * `CryptoProvider which uses the SubtleCrypto interface of the Web Crypto API.\n *\n * This only supports asynchronous operations.\n */\n\n\nclass SubtleCryptoProvider extends CryptoProvider {\n  constructor(subtleCrypto) {\n    super(); // If no subtle crypto is interface, default to the global namespace. This\n    // is to allow custom interfaces (eg. using the Node webcrypto interface in\n    // tests).\n\n    this.subtleCrypto = subtleCrypto || crypto.subtle;\n  }\n  /** @override */\n\n\n  computeHMACSignature(payload, secret) {\n    throw new Error('SubtleCryptoProvider cannot be used in a synchronous context.');\n  }\n  /** @override */\n\n\n  async computeHMACSignatureAsync(payload, secret) {\n    const encoder = new TextEncoder('utf-8');\n    const key = await this.subtleCrypto.importKey('raw', encoder.encode(secret), {\n      name: 'HMAC',\n      hash: {\n        name: 'SHA-256'\n      }\n    }, false, ['sign']);\n    const signatureBuffer = await this.subtleCrypto.sign('hmac', key, encoder.encode(payload)); // crypto.subtle returns the signature in base64 format. This must be\n    // encoded in hex to match the CryptoProvider contract. We map each byte in\n    // the buffer to its corresponding hex octet and then combine into a string.\n\n    const signatureBytes = new Uint8Array(signatureBuffer);\n    const signatureHexCodes = new Array(signatureBytes.length);\n\n    for (let i = 0; i < signatureBytes.length; i++) {\n      signatureHexCodes[i] = byteHexMapping[signatureBytes[i]];\n    }\n\n    return signatureHexCodes.join('');\n  }\n\n} // Cached mapping of byte to hex representation. We do this once to avoid re-\n// computing every time we need to convert the result of a signature to hex.\n\n\nconst byteHexMapping = new Array(256);\n\nfor (let i = 0; i < byteHexMapping.length; i++) {\n  byteHexMapping[i] = i.toString(16).padStart(2, '0');\n}\n\nmodule.exports = SubtleCryptoProvider;","map":{"version":3,"names":["CryptoProvider","require","SubtleCryptoProvider","constructor","subtleCrypto","crypto","subtle","computeHMACSignature","payload","secret","Error","computeHMACSignatureAsync","encoder","TextEncoder","key","importKey","encode","name","hash","signatureBuffer","sign","signatureBytes","Uint8Array","signatureHexCodes","Array","length","i","byteHexMapping","join","toString","padStart","module","exports"],"sources":["/Users/joris/Library/Mobile Documents/com~apple~CloudDocs/OneDrive v1/34. Projects/stripe-prebuilt/node_modules/stripe/lib/crypto/SubtleCryptoProvider.js"],"sourcesContent":["'use strict';\n\nconst CryptoProvider = require('./CryptoProvider');\n\n/**\n * `CryptoProvider which uses the SubtleCrypto interface of the Web Crypto API.\n *\n * This only supports asynchronous operations.\n */\nclass SubtleCryptoProvider extends CryptoProvider {\n  constructor(subtleCrypto) {\n    super();\n\n    // If no subtle crypto is interface, default to the global namespace. This\n    // is to allow custom interfaces (eg. using the Node webcrypto interface in\n    // tests).\n    this.subtleCrypto = subtleCrypto || crypto.subtle;\n  }\n\n  /** @override */\n  computeHMACSignature(payload, secret) {\n    throw new Error(\n      'SubtleCryptoProvider cannot be used in a synchronous context.'\n    );\n  }\n\n  /** @override */\n  async computeHMACSignatureAsync(payload, secret) {\n    const encoder = new TextEncoder('utf-8');\n\n    const key = await this.subtleCrypto.importKey(\n      'raw',\n      encoder.encode(secret),\n      {\n        name: 'HMAC',\n        hash: {name: 'SHA-256'},\n      },\n      false,\n      ['sign']\n    );\n\n    const signatureBuffer = await this.subtleCrypto.sign(\n      'hmac',\n      key,\n      encoder.encode(payload)\n    );\n\n    // crypto.subtle returns the signature in base64 format. This must be\n    // encoded in hex to match the CryptoProvider contract. We map each byte in\n    // the buffer to its corresponding hex octet and then combine into a string.\n    const signatureBytes = new Uint8Array(signatureBuffer);\n    const signatureHexCodes = new Array(signatureBytes.length);\n\n    for (let i = 0; i < signatureBytes.length; i++) {\n      signatureHexCodes[i] = byteHexMapping[signatureBytes[i]];\n    }\n\n    return signatureHexCodes.join('');\n  }\n}\n\n// Cached mapping of byte to hex representation. We do this once to avoid re-\n// computing every time we need to convert the result of a signature to hex.\nconst byteHexMapping = new Array(256);\nfor (let i = 0; i < byteHexMapping.length; i++) {\n  byteHexMapping[i] = i.toString(16).padStart(2, '0');\n}\n\nmodule.exports = SubtleCryptoProvider;\n"],"mappings":"AAAA;;AAEA,MAAMA,cAAc,GAAGC,OAAO,CAAC,kBAAD,CAA9B;AAEA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,oBAAN,SAAmCF,cAAnC,CAAkD;EAChDG,WAAW,CAACC,YAAD,EAAe;IACxB,QADwB,CAGxB;IACA;IACA;;IACA,KAAKA,YAAL,GAAoBA,YAAY,IAAIC,MAAM,CAACC,MAA3C;EACD;EAED;;;EACAC,oBAAoB,CAACC,OAAD,EAAUC,MAAV,EAAkB;IACpC,MAAM,IAAIC,KAAJ,CACJ,+DADI,CAAN;EAGD;EAED;;;EAC+B,MAAzBC,yBAAyB,CAACH,OAAD,EAAUC,MAAV,EAAkB;IAC/C,MAAMG,OAAO,GAAG,IAAIC,WAAJ,CAAgB,OAAhB,CAAhB;IAEA,MAAMC,GAAG,GAAG,MAAM,KAAKV,YAAL,CAAkBW,SAAlB,CAChB,KADgB,EAEhBH,OAAO,CAACI,MAAR,CAAeP,MAAf,CAFgB,EAGhB;MACEQ,IAAI,EAAE,MADR;MAEEC,IAAI,EAAE;QAACD,IAAI,EAAE;MAAP;IAFR,CAHgB,EAOhB,KAPgB,EAQhB,CAAC,MAAD,CARgB,CAAlB;IAWA,MAAME,eAAe,GAAG,MAAM,KAAKf,YAAL,CAAkBgB,IAAlB,CAC5B,MAD4B,EAE5BN,GAF4B,EAG5BF,OAAO,CAACI,MAAR,CAAeR,OAAf,CAH4B,CAA9B,CAd+C,CAoB/C;IACA;IACA;;IACA,MAAMa,cAAc,GAAG,IAAIC,UAAJ,CAAeH,eAAf,CAAvB;IACA,MAAMI,iBAAiB,GAAG,IAAIC,KAAJ,CAAUH,cAAc,CAACI,MAAzB,CAA1B;;IAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,cAAc,CAACI,MAAnC,EAA2CC,CAAC,EAA5C,EAAgD;MAC9CH,iBAAiB,CAACG,CAAD,CAAjB,GAAuBC,cAAc,CAACN,cAAc,CAACK,CAAD,CAAf,CAArC;IACD;;IAED,OAAOH,iBAAiB,CAACK,IAAlB,CAAuB,EAAvB,CAAP;EACD;;AAjD+C,C,CAoDlD;AACA;;;AACA,MAAMD,cAAc,GAAG,IAAIH,KAAJ,CAAU,GAAV,CAAvB;;AACA,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,cAAc,CAACF,MAAnC,EAA2CC,CAAC,EAA5C,EAAgD;EAC9CC,cAAc,CAACD,CAAD,CAAd,GAAoBA,CAAC,CAACG,QAAF,CAAW,EAAX,EAAeC,QAAf,CAAwB,CAAxB,EAA2B,GAA3B,CAApB;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiB9B,oBAAjB"},"metadata":{},"sourceType":"script"}