{"ast":null,"code":"// File generated from our OpenAPI spec\n'use strict';\n\nconst StripeResource = require('../StripeResource');\n\nconst stripeMethod = StripeResource.method; // Since path can either be `account` or `accounts`, support both through stripeMethod path;\n\nmodule.exports = StripeResource.extend({\n  path: '',\n  create: stripeMethod({\n    method: 'POST',\n    path: 'accounts'\n  }),\n\n  retrieve(id) {\n    // No longer allow an api key to be passed as the first string to this function due to ambiguity between\n    // old account ids and api keys. To request the account for an api key, send null as the id\n    if (typeof id === 'string') {\n      return stripeMethod({\n        method: 'GET',\n        path: 'accounts/{id}'\n      }).apply(this, arguments);\n    } else {\n      if (id === null || id === undefined) {\n        // Remove id as stripeMethod would complain of unexpected argument\n        [].shift.apply(arguments);\n      }\n\n      return stripeMethod({\n        method: 'GET',\n        path: 'account'\n      }).apply(this, arguments);\n    }\n  },\n\n  update: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{account}'\n  }),\n  list: stripeMethod({\n    method: 'GET',\n    path: 'accounts',\n    methodType: 'list'\n  }),\n  del: stripeMethod({\n    method: 'DELETE',\n    path: 'accounts/{account}'\n  }),\n  reject: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{account}/reject'\n  }),\n  retrieveCapability: stripeMethod({\n    method: 'GET',\n    path: 'accounts/{account}/capabilities/{capability}'\n  }),\n  updateCapability: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{account}/capabilities/{capability}'\n  }),\n  listCapabilities: stripeMethod({\n    method: 'GET',\n    path: 'accounts/{account}/capabilities',\n    methodType: 'list'\n  }),\n  createExternalAccount: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{account}/external_accounts'\n  }),\n  retrieveExternalAccount: stripeMethod({\n    method: 'GET',\n    path: 'accounts/{account}/external_accounts/{id}'\n  }),\n  updateExternalAccount: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{account}/external_accounts/{id}'\n  }),\n  listExternalAccounts: stripeMethod({\n    method: 'GET',\n    path: 'accounts/{account}/external_accounts',\n    methodType: 'list'\n  }),\n  deleteExternalAccount: stripeMethod({\n    method: 'DELETE',\n    path: 'accounts/{account}/external_accounts/{id}'\n  }),\n  createLoginLink: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{account}/login_links'\n  }),\n  createPerson: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{account}/persons'\n  }),\n  retrievePerson: stripeMethod({\n    method: 'GET',\n    path: 'accounts/{account}/persons/{person}'\n  }),\n  updatePerson: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{account}/persons/{person}'\n  }),\n  listPersons: stripeMethod({\n    method: 'GET',\n    path: 'accounts/{account}/persons',\n    methodType: 'list'\n  }),\n  deletePerson: stripeMethod({\n    method: 'DELETE',\n    path: 'accounts/{account}/persons/{person}'\n  })\n});","map":{"version":3,"names":["StripeResource","require","stripeMethod","method","module","exports","extend","path","create","retrieve","id","apply","arguments","undefined","shift","update","list","methodType","del","reject","retrieveCapability","updateCapability","listCapabilities","createExternalAccount","retrieveExternalAccount","updateExternalAccount","listExternalAccounts","deleteExternalAccount","createLoginLink","createPerson","retrievePerson","updatePerson","listPersons","deletePerson"],"sources":["/Users/joris/Library/Mobile Documents/com~apple~CloudDocs/OneDrive v1/34. Projects/stripe-prebuilt/node_modules/stripe/lib/resources/Accounts.js"],"sourcesContent":["// File generated from our OpenAPI spec\n\n'use strict';\n\nconst StripeResource = require('../StripeResource');\nconst stripeMethod = StripeResource.method;\n\n// Since path can either be `account` or `accounts`, support both through stripeMethod path;\nmodule.exports = StripeResource.extend({\n  path: '',\n\n  create: stripeMethod({\n    method: 'POST',\n    path: 'accounts',\n  }),\n\n  retrieve(id) {\n    // No longer allow an api key to be passed as the first string to this function due to ambiguity between\n    // old account ids and api keys. To request the account for an api key, send null as the id\n    if (typeof id === 'string') {\n      return stripeMethod({\n        method: 'GET',\n        path: 'accounts/{id}',\n      }).apply(this, arguments);\n    } else {\n      if (id === null || id === undefined) {\n        // Remove id as stripeMethod would complain of unexpected argument\n        [].shift.apply(arguments);\n      }\n      return stripeMethod({\n        method: 'GET',\n        path: 'account',\n      }).apply(this, arguments);\n    }\n  },\n\n  update: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{account}',\n  }),\n\n  list: stripeMethod({\n    method: 'GET',\n    path: 'accounts',\n    methodType: 'list',\n  }),\n\n  del: stripeMethod({\n    method: 'DELETE',\n    path: 'accounts/{account}',\n  }),\n\n  reject: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{account}/reject',\n  }),\n\n  retrieveCapability: stripeMethod({\n    method: 'GET',\n    path: 'accounts/{account}/capabilities/{capability}',\n  }),\n\n  updateCapability: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{account}/capabilities/{capability}',\n  }),\n\n  listCapabilities: stripeMethod({\n    method: 'GET',\n    path: 'accounts/{account}/capabilities',\n    methodType: 'list',\n  }),\n\n  createExternalAccount: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{account}/external_accounts',\n  }),\n\n  retrieveExternalAccount: stripeMethod({\n    method: 'GET',\n    path: 'accounts/{account}/external_accounts/{id}',\n  }),\n\n  updateExternalAccount: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{account}/external_accounts/{id}',\n  }),\n\n  listExternalAccounts: stripeMethod({\n    method: 'GET',\n    path: 'accounts/{account}/external_accounts',\n    methodType: 'list',\n  }),\n\n  deleteExternalAccount: stripeMethod({\n    method: 'DELETE',\n    path: 'accounts/{account}/external_accounts/{id}',\n  }),\n\n  createLoginLink: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{account}/login_links',\n  }),\n\n  createPerson: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{account}/persons',\n  }),\n\n  retrievePerson: stripeMethod({\n    method: 'GET',\n    path: 'accounts/{account}/persons/{person}',\n  }),\n\n  updatePerson: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{account}/persons/{person}',\n  }),\n\n  listPersons: stripeMethod({\n    method: 'GET',\n    path: 'accounts/{account}/persons',\n    methodType: 'list',\n  }),\n\n  deletePerson: stripeMethod({\n    method: 'DELETE',\n    path: 'accounts/{account}/persons/{person}',\n  }),\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}