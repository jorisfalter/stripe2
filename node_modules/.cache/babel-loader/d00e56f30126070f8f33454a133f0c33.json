{"ast":null,"code":"'use strict';\n\nconst {\n  HttpClient,\n  HttpClientResponse\n} = require('./HttpClient');\n/**\n * HTTP client which uses a `fetch` function to issue requests.\n *\n * By default relies on the global `fetch` function, but an optional function\n * can be passed in. If passing in a function, it is expected to match the Web\n * Fetch API. As an example, this could be the function provided by the\n * node-fetch package (https://github.com/node-fetch/node-fetch).\n */\n\n\nclass FetchHttpClient extends HttpClient {\n  constructor(fetchFn) {\n    super();\n    this._fetchFn = fetchFn;\n  }\n  /** @override. */\n\n\n  getClientName() {\n    return 'fetch';\n  }\n\n  makeRequest(host, port, path, method, headers, requestData, protocol, timeout) {\n    const isInsecureConnection = protocol === 'http';\n    const url = new URL(path, `${isInsecureConnection ? 'http' : 'https'}://${host}`);\n    url.port = port;\n    const fetchFn = this._fetchFn || fetch;\n    const fetchPromise = fetchFn(url.toString(), {\n      method,\n      headers,\n      body: requestData || undefined\n    }); // The Fetch API does not support passing in a timeout natively, so a\n    // timeout promise is constructed to race against the fetch and preempt the\n    // request, simulating a timeout.\n    //\n    // This timeout behavior differs from Node:\n    // - Fetch uses a single timeout for the entire length of the request.\n    // - Node is more fine-grained and resets the timeout after each stage of\n    //   the request.\n    //\n    // As an example, if the timeout is set to 30s and the connection takes 20s\n    // to be established followed by 20s for the body, Fetch would timeout but\n    // Node would not. The more fine-grained timeout cannot be implemented with\n    // fetch.\n\n    let pendingTimeoutId;\n    const timeoutPromise = new Promise((_, reject) => {\n      pendingTimeoutId = setTimeout(() => {\n        pendingTimeoutId = null;\n        reject(HttpClient.makeTimeoutError());\n      }, timeout);\n    });\n    return Promise.race([fetchPromise, timeoutPromise]).then(res => {\n      return new FetchHttpClientResponse(res);\n    }).finally(() => {\n      if (pendingTimeoutId) {\n        clearTimeout(pendingTimeoutId);\n      }\n    });\n  }\n\n}\n\nclass FetchHttpClientResponse extends HttpClientResponse {\n  constructor(res) {\n    super(res.status, FetchHttpClientResponse._transformHeadersToObject(res.headers));\n    this._res = res;\n  }\n\n  getRawResponse() {\n    return this._res;\n  }\n\n  toStream(streamCompleteCallback) {\n    // Unfortunately `fetch` does not have event handlers for when the stream is\n    // completely read. We therefore invoke the streamCompleteCallback right\n    // away. This callback emits a response event with metadata and completes\n    // metrics, so it's ok to do this without waiting for the stream to be\n    // completely read.\n    streamCompleteCallback(); // Fetch's `body` property is expected to be a readable stream of the body.\n\n    return this._res.body;\n  }\n\n  toJSON() {\n    return this._res.json();\n  }\n\n  static _transformHeadersToObject(headers) {\n    // Fetch uses a Headers instance so this must be converted to a barebones\n    // JS object to meet the HttpClient interface.\n    const headersObj = {};\n\n    for (const entry of headers) {\n      if (!Array.isArray(entry) || entry.length != 2) {\n        throw new Error('Response objects produced by the fetch function given to FetchHttpClient do not have an iterable headers map. Response#headers should be an iterable object.');\n      }\n\n      headersObj[entry[0]] = entry[1];\n    }\n\n    return headersObj;\n  }\n\n}\n\nmodule.exports = {\n  FetchHttpClient,\n  FetchHttpClientResponse\n};","map":{"version":3,"names":["HttpClient","HttpClientResponse","require","FetchHttpClient","constructor","fetchFn","_fetchFn","getClientName","makeRequest","host","port","path","method","headers","requestData","protocol","timeout","isInsecureConnection","url","URL","fetch","fetchPromise","toString","body","undefined","pendingTimeoutId","timeoutPromise","Promise","_","reject","setTimeout","makeTimeoutError","race","then","res","FetchHttpClientResponse","finally","clearTimeout","status","_transformHeadersToObject","_res","getRawResponse","toStream","streamCompleteCallback","toJSON","json","headersObj","entry","Array","isArray","length","Error","module","exports"],"sources":["/Users/joris/Library/Mobile Documents/com~apple~CloudDocs/OneDrive v1/34. Projects/stripe-prebuilt/node_modules/stripe/lib/net/FetchHttpClient.js"],"sourcesContent":["'use strict';\n\nconst {HttpClient, HttpClientResponse} = require('./HttpClient');\n\n/**\n * HTTP client which uses a `fetch` function to issue requests.\n *\n * By default relies on the global `fetch` function, but an optional function\n * can be passed in. If passing in a function, it is expected to match the Web\n * Fetch API. As an example, this could be the function provided by the\n * node-fetch package (https://github.com/node-fetch/node-fetch).\n */\nclass FetchHttpClient extends HttpClient {\n  constructor(fetchFn) {\n    super();\n    this._fetchFn = fetchFn;\n  }\n\n  /** @override. */\n  getClientName() {\n    return 'fetch';\n  }\n\n  makeRequest(\n    host,\n    port,\n    path,\n    method,\n    headers,\n    requestData,\n    protocol,\n    timeout\n  ) {\n    const isInsecureConnection = protocol === 'http';\n\n    const url = new URL(\n      path,\n      `${isInsecureConnection ? 'http' : 'https'}://${host}`\n    );\n    url.port = port;\n\n    const fetchFn = this._fetchFn || fetch;\n    const fetchPromise = fetchFn(url.toString(), {\n      method,\n      headers,\n      body: requestData || undefined,\n    });\n\n    // The Fetch API does not support passing in a timeout natively, so a\n    // timeout promise is constructed to race against the fetch and preempt the\n    // request, simulating a timeout.\n    //\n    // This timeout behavior differs from Node:\n    // - Fetch uses a single timeout for the entire length of the request.\n    // - Node is more fine-grained and resets the timeout after each stage of\n    //   the request.\n    //\n    // As an example, if the timeout is set to 30s and the connection takes 20s\n    // to be established followed by 20s for the body, Fetch would timeout but\n    // Node would not. The more fine-grained timeout cannot be implemented with\n    // fetch.\n    let pendingTimeoutId;\n    const timeoutPromise = new Promise((_, reject) => {\n      pendingTimeoutId = setTimeout(() => {\n        pendingTimeoutId = null;\n        reject(HttpClient.makeTimeoutError());\n      }, timeout);\n    });\n\n    return Promise.race([fetchPromise, timeoutPromise])\n      .then((res) => {\n        return new FetchHttpClientResponse(res);\n      })\n      .finally(() => {\n        if (pendingTimeoutId) {\n          clearTimeout(pendingTimeoutId);\n        }\n      });\n  }\n}\n\nclass FetchHttpClientResponse extends HttpClientResponse {\n  constructor(res) {\n    super(\n      res.status,\n      FetchHttpClientResponse._transformHeadersToObject(res.headers)\n    );\n    this._res = res;\n  }\n\n  getRawResponse() {\n    return this._res;\n  }\n\n  toStream(streamCompleteCallback) {\n    // Unfortunately `fetch` does not have event handlers for when the stream is\n    // completely read. We therefore invoke the streamCompleteCallback right\n    // away. This callback emits a response event with metadata and completes\n    // metrics, so it's ok to do this without waiting for the stream to be\n    // completely read.\n    streamCompleteCallback();\n\n    // Fetch's `body` property is expected to be a readable stream of the body.\n    return this._res.body;\n  }\n\n  toJSON() {\n    return this._res.json();\n  }\n\n  static _transformHeadersToObject(headers) {\n    // Fetch uses a Headers instance so this must be converted to a barebones\n    // JS object to meet the HttpClient interface.\n    const headersObj = {};\n\n    for (const entry of headers) {\n      if (!Array.isArray(entry) || entry.length != 2) {\n        throw new Error(\n          'Response objects produced by the fetch function given to FetchHttpClient do not have an iterable headers map. Response#headers should be an iterable object.'\n        );\n      }\n\n      headersObj[entry[0]] = entry[1];\n    }\n\n    return headersObj;\n  }\n}\n\nmodule.exports = {FetchHttpClient, FetchHttpClientResponse};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}