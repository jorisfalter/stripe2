{"ast":null,"code":"'use strict';\n\nconst path = require('path');\n\nconst utils = require('./utils');\n\nconst {\n  StripeConnectionError,\n  StripeAuthenticationError,\n  StripePermissionError,\n  StripeRateLimitError,\n  StripeError,\n  StripeAPIError\n} = require('./Error');\n\nconst {\n  HttpClient\n} = require('./net/HttpClient'); // Provide extension mechanism for Stripe Resource Sub-Classes\n\n\nStripeResource.extend = utils.protoExtend; // Expose method-creator & prepared (basic) methods\n\nStripeResource.method = require('./StripeMethod');\nStripeResource.BASIC_METHODS = require('./StripeMethod.basic');\nStripeResource.MAX_BUFFERED_REQUEST_METRICS = 100;\nconst MAX_RETRY_AFTER_WAIT = 60;\n/**\n * Encapsulates request logic for a Stripe Resource\n */\n\nfunction StripeResource(stripe, deprecatedUrlData) {\n  this._stripe = stripe;\n\n  if (deprecatedUrlData) {\n    throw new Error('Support for curried url params was dropped in stripe-node v7.0.0. Instead, pass two ids.');\n  }\n\n  this.basePath = utils.makeURLInterpolator(this.basePath || stripe.getApiField('basePath'));\n  this.resourcePath = this.path;\n  this.path = utils.makeURLInterpolator(this.path); // DEPRECATED: This was kept for backwards compatibility in case users were\n  // using this, but basic methods are now explicitly defined on a resource.\n\n  if (this.includeBasic) {\n    this.includeBasic.forEach(function (methodName) {\n      this[methodName] = StripeResource.BASIC_METHODS[methodName];\n    }, this);\n  }\n\n  this.initialize(...arguments);\n}\n\nStripeResource.prototype = {\n  path: '',\n  // Methods that don't use the API's default '/v1' path can override it with this setting.\n  basePath: null,\n\n  initialize() {},\n\n  // Function to override the default data processor. This allows full control\n  // over how a StripeResource's request data will get converted into an HTTP\n  // body. This is useful for non-standard HTTP requests. The function should\n  // take method name, data, and headers as arguments.\n  requestDataProcessor: null,\n  // Function to add a validation checks before sending the request, errors should\n  // be thrown, and they will be passed to the callback/promise.\n  validateRequest: null,\n\n  createFullPath(commandPath, urlData) {\n    return path.join(this.basePath(urlData), this.path(urlData), typeof commandPath == 'function' ? commandPath(urlData) : commandPath).replace(/\\\\/g, '/'); // ugly workaround for Windows\n  },\n\n  // Creates a relative resource path with symbols left in (unlike\n  // createFullPath which takes some data to replace them with). For example it\n  // might produce: /invoices/{id}\n  createResourcePathWithSymbols(pathWithSymbols) {\n    return `/${path.join(this.resourcePath, pathWithSymbols || '').replace(/\\\\/g, '/')}`; // ugly workaround for Windows\n  },\n\n  // DEPRECATED: Here for backcompat in case users relied on this.\n  wrapTimeout: utils.callbackifyPromiseWithTimeout,\n\n  _timeoutHandler(timeout, req, callback) {\n    return () => {\n      const timeoutErr = new TypeError('ETIMEDOUT');\n      timeoutErr.code = 'ETIMEDOUT';\n      req.destroy(timeoutErr);\n    };\n  },\n\n  _addHeadersDirectlyToObject(obj, headers) {\n    // For convenience, make some headers easily accessible on\n    // lastResponse.\n    // NOTE: Stripe responds with lowercase header names/keys.\n    obj.requestId = headers['request-id'];\n    obj.stripeAccount = obj.stripeAccount || headers['stripe-account'];\n    obj.apiVersion = obj.apiVersion || headers['stripe-version'];\n    obj.idempotencyKey = obj.idempotencyKey || headers['idempotency-key'];\n  },\n\n  _makeResponseEvent(requestEvent, statusCode, headers) {\n    const requestEndTime = Date.now();\n    const requestDurationMs = requestEndTime - requestEvent.request_start_time;\n    return utils.removeNullish({\n      api_version: headers['stripe-version'],\n      account: headers['stripe-account'],\n      idempotency_key: headers['idempotency-key'],\n      method: requestEvent.method,\n      path: requestEvent.path,\n      status: statusCode,\n      request_id: this._getRequestId(headers),\n      elapsed: requestDurationMs,\n      request_start_time: requestEvent.request_start_time,\n      request_end_time: requestEndTime\n    });\n  },\n\n  _getRequestId(headers) {\n    return headers['request-id'];\n  },\n\n  /**\n   * Used by methods with spec.streaming === true. For these methods, we do not\n   * buffer successful responses into memory or do parse them into stripe\n   * objects, we delegate that all of that to the user and pass back the raw\n   * http.Response object to the callback.\n   *\n   * (Unsuccessful responses shouldn't make it here, they should\n   * still be buffered/parsed and handled by _jsonResponseHandler -- see\n   * makeRequest)\n   */\n  _streamingResponseHandler(requestEvent, callback) {\n    return res => {\n      const headers = res.getHeaders();\n\n      const streamCompleteCallback = () => {\n        const responseEvent = this._makeResponseEvent(requestEvent, res.getStatusCode(), headers);\n\n        this._stripe._emitter.emit('response', responseEvent);\n\n        this._recordRequestMetrics(this._getRequestId(headers), responseEvent.elapsed);\n      };\n\n      const stream = res.toStream(streamCompleteCallback); // This is here for backwards compatibility, as the stream is a raw\n      // HTTP response in Node and the legacy behavior was to mutate this\n      // response.\n\n      this._addHeadersDirectlyToObject(stream, headers);\n\n      return callback(null, stream);\n    };\n  },\n\n  /**\n   * Default handler for Stripe responses. Buffers the response into memory,\n   * parses the JSON and returns it (i.e. passes it to the callback) if there\n   * is no \"error\" field. Otherwise constructs/passes an appropriate Error.\n   */\n  _jsonResponseHandler(requestEvent, callback) {\n    return res => {\n      const headers = res.getHeaders();\n\n      const requestId = this._getRequestId(headers);\n\n      const statusCode = res.getStatusCode();\n\n      const responseEvent = this._makeResponseEvent(requestEvent, statusCode, headers);\n\n      this._stripe._emitter.emit('response', responseEvent);\n\n      res.toJSON().then(jsonResponse => {\n        if (jsonResponse.error) {\n          let err; // Convert OAuth error responses into a standard format\n          // so that the rest of the error logic can be shared\n\n          if (typeof jsonResponse.error === 'string') {\n            jsonResponse.error = {\n              type: jsonResponse.error,\n              message: jsonResponse.error_description\n            };\n          }\n\n          jsonResponse.error.headers = headers;\n          jsonResponse.error.statusCode = statusCode;\n          jsonResponse.error.requestId = requestId;\n\n          if (statusCode === 401) {\n            err = new StripeAuthenticationError(jsonResponse.error);\n          } else if (statusCode === 403) {\n            err = new StripePermissionError(jsonResponse.error);\n          } else if (statusCode === 429) {\n            err = new StripeRateLimitError(jsonResponse.error);\n          } else {\n            err = StripeError.generate(jsonResponse.error);\n          }\n\n          throw err;\n        }\n\n        return jsonResponse;\n      }, e => {\n        throw new StripeAPIError({\n          message: 'Invalid JSON received from the Stripe API',\n          exception: e,\n          requestId: headers['request-id']\n        });\n      }).then(jsonResponse => {\n        this._recordRequestMetrics(requestId, responseEvent.elapsed); // Expose raw response object.\n\n\n        const rawResponse = res.getRawResponse();\n\n        this._addHeadersDirectlyToObject(rawResponse, headers);\n\n        Object.defineProperty(jsonResponse, 'lastResponse', {\n          enumerable: false,\n          writable: false,\n          value: rawResponse\n        });\n        callback.call(this, null, jsonResponse);\n      }, e => callback.call(this, e, null));\n    };\n  },\n\n  _generateConnectionErrorMessage(requestRetries) {\n    return `An error occurred with our connection to Stripe.${requestRetries > 0 ? ` Request was retried ${requestRetries} times.` : ''}`;\n  },\n\n  _errorHandler(req, requestRetries, callback) {\n    return (message, detail) => {\n      callback.call(this, new StripeConnectionError({\n        message: this._generateConnectionErrorMessage(requestRetries),\n        detail: error\n      }), null);\n    };\n  },\n\n  // For more on when and how to retry API requests, see https://stripe.com/docs/error-handling#safely-retrying-requests-with-idempotency\n  _shouldRetry(res, numRetries, maxRetries) {\n    // Do not retry if we are out of retries.\n    if (numRetries >= maxRetries) {\n      return false;\n    } // Retry on connection error.\n\n\n    if (!res) {\n      return true;\n    } // The API may ask us not to retry (e.g., if doing so would be a no-op)\n    // or advise us to retry (e.g., in cases of lock timeouts); we defer to that.\n\n\n    if (res.getHeaders()['stripe-should-retry'] === 'false') {\n      return false;\n    }\n\n    if (res.getHeaders()['stripe-should-retry'] === 'true') {\n      return true;\n    } // Retry on conflict errors.\n\n\n    if (res.getStatusCode() === 409) {\n      return true;\n    } // Retry on 500, 503, and other internal errors.\n    //\n    // Note that we expect the stripe-should-retry header to be false\n    // in most cases when a 500 is returned, since our idempotency framework\n    // would typically replay it anyway.\n\n\n    if (res.getStatusCode() >= 500) {\n      return true;\n    }\n\n    return false;\n  },\n\n  _getSleepTimeInMS(numRetries) {\n    let retryAfter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    const initialNetworkRetryDelay = this._stripe.getInitialNetworkRetryDelay();\n\n    const maxNetworkRetryDelay = this._stripe.getMaxNetworkRetryDelay(); // Apply exponential backoff with initialNetworkRetryDelay on the\n    // number of numRetries so far as inputs. Do not allow the number to exceed\n    // maxNetworkRetryDelay.\n\n\n    let sleepSeconds = Math.min(initialNetworkRetryDelay * Math.pow(numRetries - 1, 2), maxNetworkRetryDelay); // Apply some jitter by randomizing the value in the range of\n    // (sleepSeconds / 2) to (sleepSeconds).\n\n    sleepSeconds *= 0.5 * (1 + Math.random()); // But never sleep less than the base sleep seconds.\n\n    sleepSeconds = Math.max(initialNetworkRetryDelay, sleepSeconds); // And never sleep less than the time the API asks us to wait, assuming it's a reasonable ask.\n\n    if (Number.isInteger(retryAfter) && retryAfter <= MAX_RETRY_AFTER_WAIT) {\n      sleepSeconds = Math.max(sleepSeconds, retryAfter);\n    }\n\n    return sleepSeconds * 1000;\n  },\n\n  // Max retries can be set on a per request basis. Favor those over the global setting\n  _getMaxNetworkRetries() {\n    let settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return settings.maxNetworkRetries && Number.isInteger(settings.maxNetworkRetries) ? settings.maxNetworkRetries : this._stripe.getMaxNetworkRetries();\n  },\n\n  _defaultIdempotencyKey(method, settings) {\n    // If this is a POST and we allow multiple retries, ensure an idempotency key.\n    const maxRetries = this._getMaxNetworkRetries(settings);\n\n    if (method === 'POST' && maxRetries > 0) {\n      return `stripe-node-retry-${utils.uuid4()}`;\n    }\n\n    return null;\n  },\n\n  _makeHeaders(auth, contentLength, apiVersion, clientUserAgent, method, userSuppliedHeaders, userSuppliedSettings) {\n    const defaultHeaders = {\n      // Use specified auth token or use default from this stripe instance:\n      Authorization: auth ? `Bearer ${auth}` : this._stripe.getApiField('auth'),\n      Accept: 'application/json',\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'User-Agent': this._getUserAgentString(),\n      'X-Stripe-Client-User-Agent': clientUserAgent,\n      'X-Stripe-Client-Telemetry': this._getTelemetryHeader(),\n      'Stripe-Version': apiVersion,\n      'Stripe-Account': this._stripe.getApiField('stripeAccount'),\n      'Idempotency-Key': this._defaultIdempotencyKey(method, userSuppliedSettings)\n    }; // As per https://datatracker.ietf.org/doc/html/rfc7230#section-3.3.2:\n    //   A user agent SHOULD send a Content-Length in a request message when\n    //   no Transfer-Encoding is sent and the request method defines a meaning\n    //   for an enclosed payload body.  For example, a Content-Length header\n    //   field is normally sent in a POST request even when the value is 0\n    //   (indicating an empty payload body).  A user agent SHOULD NOT send a\n    //   Content-Length header field when the request message does not contain\n    //   a payload body and the method semantics do not anticipate such a\n    //   body.\n    //\n    // These method types are expected to have bodies and so we should always\n    // include a Content-Length.\n\n    const methodHasPayload = method == 'POST' || method == 'PUT' || method == 'PATCH'; // If a content length was specified, we always include it regardless of\n    // whether the method semantics anticipate such a body. This keeps us\n    // consistent with historical behavior. We do however want to warn on this\n    // and fix these cases as they are semantically incorrect.\n\n    if (methodHasPayload || contentLength) {\n      if (!methodHasPayload) {\n        utils.emitWarning(`${method} method had non-zero contentLength but no payload is expected for this verb`);\n      }\n\n      defaultHeaders['Content-Length'] = contentLength;\n    }\n\n    return Object.assign(utils.removeNullish(defaultHeaders), // If the user supplied, say 'idempotency-key', override instead of appending by ensuring caps are the same.\n    utils.normalizeHeaders(userSuppliedHeaders));\n  },\n\n  _getUserAgentString() {\n    const packageVersion = this._stripe.getConstant('PACKAGE_VERSION');\n\n    const appInfo = this._stripe._appInfo ? this._stripe.getAppInfoAsString() : '';\n    return `Stripe/v1 NodeBindings/${packageVersion} ${appInfo}`.trim();\n  },\n\n  _getTelemetryHeader() {\n    if (this._stripe.getTelemetryEnabled() && this._stripe._prevRequestMetrics.length > 0) {\n      const metrics = this._stripe._prevRequestMetrics.shift();\n\n      return JSON.stringify({\n        last_request_metrics: metrics\n      });\n    }\n  },\n\n  _recordRequestMetrics(requestId, requestDurationMs) {\n    if (this._stripe.getTelemetryEnabled() && requestId) {\n      if (this._stripe._prevRequestMetrics.length > StripeResource.MAX_BUFFERED_REQUEST_METRICS) {\n        utils.emitWarning('Request metrics buffer is full, dropping telemetry message.');\n      } else {\n        this._stripe._prevRequestMetrics.push({\n          request_id: requestId,\n          request_duration_ms: requestDurationMs\n        });\n      }\n    }\n  },\n\n  _request(method, host, path, data, auth) {\n    let options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n    let callback = arguments.length > 6 ? arguments[6] : undefined;\n    let requestData;\n\n    const retryRequest = (requestFn, apiVersion, headers, requestRetries, retryAfter) => {\n      return setTimeout(requestFn, this._getSleepTimeInMS(requestRetries, retryAfter), apiVersion, headers, requestRetries + 1);\n    };\n\n    const makeRequest = (apiVersion, headers, numRetries) => {\n      // timeout can be set on a per-request basis. Favor that over the global setting\n      const timeout = options.settings && Number.isInteger(options.settings.timeout) && options.settings.timeout >= 0 ? options.settings.timeout : this._stripe.getApiField('timeout');\n\n      const req = this._stripe.getApiField('httpClient').makeRequest(host || this._stripe.getApiField('host'), this._stripe.getApiField('port'), path, method, headers, requestData, this._stripe.getApiField('protocol'), timeout);\n\n      const requestStartTime = Date.now();\n      const requestEvent = utils.removeNullish({\n        api_version: apiVersion,\n        account: headers['Stripe-Account'],\n        idempotency_key: headers['Idempotency-Key'],\n        method,\n        path,\n        request_start_time: requestStartTime\n      });\n      const requestRetries = numRetries || 0;\n\n      const maxRetries = this._getMaxNetworkRetries(options.settings);\n\n      this._stripe._emitter.emit('request', requestEvent);\n\n      req.then(res => {\n        if (this._shouldRetry(res, requestRetries, maxRetries)) {\n          return retryRequest(makeRequest, apiVersion, headers, requestRetries, res.getHeaders()['retry-after']);\n        } else if (options.streaming && res.getStatusCode() < 400) {\n          return this._streamingResponseHandler(requestEvent, callback)(res);\n        } else {\n          return this._jsonResponseHandler(requestEvent, callback)(res);\n        }\n      }).catch(error => {\n        if (this._shouldRetry(null, requestRetries, maxRetries)) {\n          return retryRequest(makeRequest, apiVersion, headers, requestRetries, null);\n        } else {\n          const isTimeoutError = error.code && error.code === HttpClient.TIMEOUT_ERROR_CODE;\n          return callback.call(this, new StripeConnectionError({\n            message: isTimeoutError ? `Request aborted due to timeout being reached (${timeout}ms)` : this._generateConnectionErrorMessage(requestRetries),\n            detail: error\n          }));\n        }\n      });\n    };\n\n    const prepareAndMakeRequest = (error, data) => {\n      if (error) {\n        return callback(error);\n      }\n\n      requestData = data;\n\n      this._stripe.getClientUserAgent(clientUserAgent => {\n        const apiVersion = this._stripe.getApiField('version');\n\n        const headers = this._makeHeaders(auth, requestData.length, apiVersion, clientUserAgent, method, options.headers, options.settings);\n\n        makeRequest(apiVersion, headers);\n      });\n    };\n\n    if (this.requestDataProcessor) {\n      this.requestDataProcessor(method, data, options.headers, prepareAndMakeRequest);\n    } else {\n      prepareAndMakeRequest(null, utils.stringifyRequestData(data || {}));\n    }\n  }\n\n};\nmodule.exports = StripeResource;","map":{"version":3,"names":["path","require","utils","StripeConnectionError","StripeAuthenticationError","StripePermissionError","StripeRateLimitError","StripeError","StripeAPIError","HttpClient","StripeResource","extend","protoExtend","method","BASIC_METHODS","MAX_BUFFERED_REQUEST_METRICS","MAX_RETRY_AFTER_WAIT","stripe","deprecatedUrlData","_stripe","Error","basePath","makeURLInterpolator","getApiField","resourcePath","includeBasic","forEach","methodName","initialize","arguments","prototype","requestDataProcessor","validateRequest","createFullPath","commandPath","urlData","join","replace","createResourcePathWithSymbols","pathWithSymbols","wrapTimeout","callbackifyPromiseWithTimeout","_timeoutHandler","timeout","req","callback","timeoutErr","TypeError","code","destroy","_addHeadersDirectlyToObject","obj","headers","requestId","stripeAccount","apiVersion","idempotencyKey","_makeResponseEvent","requestEvent","statusCode","requestEndTime","Date","now","requestDurationMs","request_start_time","removeNullish","api_version","account","idempotency_key","status","request_id","_getRequestId","elapsed","request_end_time","_streamingResponseHandler","res","getHeaders","streamCompleteCallback","responseEvent","getStatusCode","_emitter","emit","_recordRequestMetrics","stream","toStream","_jsonResponseHandler","toJSON","then","jsonResponse","error","err","type","message","error_description","generate","e","exception","rawResponse","getRawResponse","Object","defineProperty","enumerable","writable","value","call","_generateConnectionErrorMessage","requestRetries","_errorHandler","detail","_shouldRetry","numRetries","maxRetries","_getSleepTimeInMS","retryAfter","initialNetworkRetryDelay","getInitialNetworkRetryDelay","maxNetworkRetryDelay","getMaxNetworkRetryDelay","sleepSeconds","Math","min","pow","random","max","Number","isInteger","_getMaxNetworkRetries","settings","maxNetworkRetries","getMaxNetworkRetries","_defaultIdempotencyKey","uuid4","_makeHeaders","auth","contentLength","clientUserAgent","userSuppliedHeaders","userSuppliedSettings","defaultHeaders","Authorization","Accept","_getUserAgentString","_getTelemetryHeader","methodHasPayload","emitWarning","assign","normalizeHeaders","packageVersion","getConstant","appInfo","_appInfo","getAppInfoAsString","trim","getTelemetryEnabled","_prevRequestMetrics","length","metrics","shift","JSON","stringify","last_request_metrics","push","request_duration_ms","_request","host","data","options","requestData","retryRequest","requestFn","setTimeout","makeRequest","requestStartTime","streaming","catch","isTimeoutError","TIMEOUT_ERROR_CODE","prepareAndMakeRequest","getClientUserAgent","stringifyRequestData","module","exports"],"sources":["/Users/joris/Library/Mobile Documents/com~apple~CloudDocs/OneDrive v1/34. Projects/stripe-prebuilt/node_modules/stripe/lib/StripeResource.js"],"sourcesContent":["'use strict';\n\nconst path = require('path');\n\nconst utils = require('./utils');\nconst {\n  StripeConnectionError,\n  StripeAuthenticationError,\n  StripePermissionError,\n  StripeRateLimitError,\n  StripeError,\n  StripeAPIError,\n} = require('./Error');\n\nconst {HttpClient} = require('./net/HttpClient');\n\n// Provide extension mechanism for Stripe Resource Sub-Classes\nStripeResource.extend = utils.protoExtend;\n\n// Expose method-creator & prepared (basic) methods\nStripeResource.method = require('./StripeMethod');\nStripeResource.BASIC_METHODS = require('./StripeMethod.basic');\n\nStripeResource.MAX_BUFFERED_REQUEST_METRICS = 100;\nconst MAX_RETRY_AFTER_WAIT = 60;\n\n/**\n * Encapsulates request logic for a Stripe Resource\n */\nfunction StripeResource(stripe, deprecatedUrlData) {\n  this._stripe = stripe;\n  if (deprecatedUrlData) {\n    throw new Error(\n      'Support for curried url params was dropped in stripe-node v7.0.0. Instead, pass two ids.'\n    );\n  }\n\n  this.basePath = utils.makeURLInterpolator(\n    this.basePath || stripe.getApiField('basePath')\n  );\n  this.resourcePath = this.path;\n  this.path = utils.makeURLInterpolator(this.path);\n\n  // DEPRECATED: This was kept for backwards compatibility in case users were\n  // using this, but basic methods are now explicitly defined on a resource.\n  if (this.includeBasic) {\n    this.includeBasic.forEach(function(methodName) {\n      this[methodName] = StripeResource.BASIC_METHODS[methodName];\n    }, this);\n  }\n\n  this.initialize(...arguments);\n}\n\nStripeResource.prototype = {\n  path: '',\n\n  // Methods that don't use the API's default '/v1' path can override it with this setting.\n  basePath: null,\n\n  initialize() {},\n\n  // Function to override the default data processor. This allows full control\n  // over how a StripeResource's request data will get converted into an HTTP\n  // body. This is useful for non-standard HTTP requests. The function should\n  // take method name, data, and headers as arguments.\n  requestDataProcessor: null,\n\n  // Function to add a validation checks before sending the request, errors should\n  // be thrown, and they will be passed to the callback/promise.\n  validateRequest: null,\n\n  createFullPath(commandPath, urlData) {\n    return path\n      .join(\n        this.basePath(urlData),\n        this.path(urlData),\n        typeof commandPath == 'function' ? commandPath(urlData) : commandPath\n      )\n      .replace(/\\\\/g, '/'); // ugly workaround for Windows\n  },\n\n  // Creates a relative resource path with symbols left in (unlike\n  // createFullPath which takes some data to replace them with). For example it\n  // might produce: /invoices/{id}\n  createResourcePathWithSymbols(pathWithSymbols) {\n    return `/${path\n      .join(this.resourcePath, pathWithSymbols || '')\n      .replace(/\\\\/g, '/')}`; // ugly workaround for Windows\n  },\n\n  // DEPRECATED: Here for backcompat in case users relied on this.\n  wrapTimeout: utils.callbackifyPromiseWithTimeout,\n\n  _timeoutHandler(timeout, req, callback) {\n    return () => {\n      const timeoutErr = new TypeError('ETIMEDOUT');\n      timeoutErr.code = 'ETIMEDOUT';\n\n      req.destroy(timeoutErr);\n    };\n  },\n\n  _addHeadersDirectlyToObject(obj, headers) {\n    // For convenience, make some headers easily accessible on\n    // lastResponse.\n\n    // NOTE: Stripe responds with lowercase header names/keys.\n    obj.requestId = headers['request-id'];\n    obj.stripeAccount = obj.stripeAccount || headers['stripe-account'];\n    obj.apiVersion = obj.apiVersion || headers['stripe-version'];\n    obj.idempotencyKey = obj.idempotencyKey || headers['idempotency-key'];\n  },\n\n  _makeResponseEvent(requestEvent, statusCode, headers) {\n    const requestEndTime = Date.now();\n    const requestDurationMs = requestEndTime - requestEvent.request_start_time;\n\n    return utils.removeNullish({\n      api_version: headers['stripe-version'],\n      account: headers['stripe-account'],\n      idempotency_key: headers['idempotency-key'],\n      method: requestEvent.method,\n      path: requestEvent.path,\n      status: statusCode,\n      request_id: this._getRequestId(headers),\n      elapsed: requestDurationMs,\n      request_start_time: requestEvent.request_start_time,\n      request_end_time: requestEndTime,\n    });\n  },\n\n  _getRequestId(headers) {\n    return headers['request-id'];\n  },\n\n  /**\n   * Used by methods with spec.streaming === true. For these methods, we do not\n   * buffer successful responses into memory or do parse them into stripe\n   * objects, we delegate that all of that to the user and pass back the raw\n   * http.Response object to the callback.\n   *\n   * (Unsuccessful responses shouldn't make it here, they should\n   * still be buffered/parsed and handled by _jsonResponseHandler -- see\n   * makeRequest)\n   */\n  _streamingResponseHandler(requestEvent, callback) {\n    return (res) => {\n      const headers = res.getHeaders();\n\n      const streamCompleteCallback = () => {\n        const responseEvent = this._makeResponseEvent(\n          requestEvent,\n          res.getStatusCode(),\n          headers\n        );\n        this._stripe._emitter.emit('response', responseEvent);\n        this._recordRequestMetrics(\n          this._getRequestId(headers),\n          responseEvent.elapsed\n        );\n      };\n\n      const stream = res.toStream(streamCompleteCallback);\n\n      // This is here for backwards compatibility, as the stream is a raw\n      // HTTP response in Node and the legacy behavior was to mutate this\n      // response.\n      this._addHeadersDirectlyToObject(stream, headers);\n\n      return callback(null, stream);\n    };\n  },\n\n  /**\n   * Default handler for Stripe responses. Buffers the response into memory,\n   * parses the JSON and returns it (i.e. passes it to the callback) if there\n   * is no \"error\" field. Otherwise constructs/passes an appropriate Error.\n   */\n  _jsonResponseHandler(requestEvent, callback) {\n    return (res) => {\n      const headers = res.getHeaders();\n      const requestId = this._getRequestId(headers);\n      const statusCode = res.getStatusCode();\n\n      const responseEvent = this._makeResponseEvent(\n        requestEvent,\n        statusCode,\n        headers\n      );\n      this._stripe._emitter.emit('response', responseEvent);\n\n      res\n        .toJSON()\n        .then(\n          (jsonResponse) => {\n            if (jsonResponse.error) {\n              let err;\n\n              // Convert OAuth error responses into a standard format\n              // so that the rest of the error logic can be shared\n              if (typeof jsonResponse.error === 'string') {\n                jsonResponse.error = {\n                  type: jsonResponse.error,\n                  message: jsonResponse.error_description,\n                };\n              }\n\n              jsonResponse.error.headers = headers;\n              jsonResponse.error.statusCode = statusCode;\n              jsonResponse.error.requestId = requestId;\n\n              if (statusCode === 401) {\n                err = new StripeAuthenticationError(jsonResponse.error);\n              } else if (statusCode === 403) {\n                err = new StripePermissionError(jsonResponse.error);\n              } else if (statusCode === 429) {\n                err = new StripeRateLimitError(jsonResponse.error);\n              } else {\n                err = StripeError.generate(jsonResponse.error);\n              }\n\n              throw err;\n            }\n\n            return jsonResponse;\n          },\n          (e) => {\n            throw new StripeAPIError({\n              message: 'Invalid JSON received from the Stripe API',\n              exception: e,\n              requestId: headers['request-id'],\n            });\n          }\n        )\n        .then(\n          (jsonResponse) => {\n            this._recordRequestMetrics(requestId, responseEvent.elapsed);\n\n            // Expose raw response object.\n            const rawResponse = res.getRawResponse();\n            this._addHeadersDirectlyToObject(rawResponse, headers);\n            Object.defineProperty(jsonResponse, 'lastResponse', {\n              enumerable: false,\n              writable: false,\n              value: rawResponse,\n            });\n\n            callback.call(this, null, jsonResponse);\n          },\n          (e) => callback.call(this, e, null)\n        );\n    };\n  },\n\n  _generateConnectionErrorMessage(requestRetries) {\n    return `An error occurred with our connection to Stripe.${\n      requestRetries > 0 ? ` Request was retried ${requestRetries} times.` : ''\n    }`;\n  },\n\n  _errorHandler(req, requestRetries, callback) {\n    return (message, detail) => {\n      callback.call(\n        this,\n        new StripeConnectionError({\n          message: this._generateConnectionErrorMessage(requestRetries),\n          detail: error,\n        }),\n        null\n      );\n    };\n  },\n\n  // For more on when and how to retry API requests, see https://stripe.com/docs/error-handling#safely-retrying-requests-with-idempotency\n  _shouldRetry(res, numRetries, maxRetries) {\n    // Do not retry if we are out of retries.\n    if (numRetries >= maxRetries) {\n      return false;\n    }\n\n    // Retry on connection error.\n    if (!res) {\n      return true;\n    }\n\n    // The API may ask us not to retry (e.g., if doing so would be a no-op)\n    // or advise us to retry (e.g., in cases of lock timeouts); we defer to that.\n    if (res.getHeaders()['stripe-should-retry'] === 'false') {\n      return false;\n    }\n    if (res.getHeaders()['stripe-should-retry'] === 'true') {\n      return true;\n    }\n\n    // Retry on conflict errors.\n    if (res.getStatusCode() === 409) {\n      return true;\n    }\n\n    // Retry on 500, 503, and other internal errors.\n    //\n    // Note that we expect the stripe-should-retry header to be false\n    // in most cases when a 500 is returned, since our idempotency framework\n    // would typically replay it anyway.\n    if (res.getStatusCode() >= 500) {\n      return true;\n    }\n\n    return false;\n  },\n\n  _getSleepTimeInMS(numRetries, retryAfter = null) {\n    const initialNetworkRetryDelay = this._stripe.getInitialNetworkRetryDelay();\n    const maxNetworkRetryDelay = this._stripe.getMaxNetworkRetryDelay();\n\n    // Apply exponential backoff with initialNetworkRetryDelay on the\n    // number of numRetries so far as inputs. Do not allow the number to exceed\n    // maxNetworkRetryDelay.\n    let sleepSeconds = Math.min(\n      initialNetworkRetryDelay * Math.pow(numRetries - 1, 2),\n      maxNetworkRetryDelay\n    );\n\n    // Apply some jitter by randomizing the value in the range of\n    // (sleepSeconds / 2) to (sleepSeconds).\n    sleepSeconds *= 0.5 * (1 + Math.random());\n\n    // But never sleep less than the base sleep seconds.\n    sleepSeconds = Math.max(initialNetworkRetryDelay, sleepSeconds);\n\n    // And never sleep less than the time the API asks us to wait, assuming it's a reasonable ask.\n    if (Number.isInteger(retryAfter) && retryAfter <= MAX_RETRY_AFTER_WAIT) {\n      sleepSeconds = Math.max(sleepSeconds, retryAfter);\n    }\n\n    return sleepSeconds * 1000;\n  },\n\n  // Max retries can be set on a per request basis. Favor those over the global setting\n  _getMaxNetworkRetries(settings = {}) {\n    return settings.maxNetworkRetries &&\n      Number.isInteger(settings.maxNetworkRetries)\n      ? settings.maxNetworkRetries\n      : this._stripe.getMaxNetworkRetries();\n  },\n\n  _defaultIdempotencyKey(method, settings) {\n    // If this is a POST and we allow multiple retries, ensure an idempotency key.\n    const maxRetries = this._getMaxNetworkRetries(settings);\n\n    if (method === 'POST' && maxRetries > 0) {\n      return `stripe-node-retry-${utils.uuid4()}`;\n    }\n    return null;\n  },\n\n  _makeHeaders(\n    auth,\n    contentLength,\n    apiVersion,\n    clientUserAgent,\n    method,\n    userSuppliedHeaders,\n    userSuppliedSettings\n  ) {\n    const defaultHeaders = {\n      // Use specified auth token or use default from this stripe instance:\n      Authorization: auth ? `Bearer ${auth}` : this._stripe.getApiField('auth'),\n      Accept: 'application/json',\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'User-Agent': this._getUserAgentString(),\n      'X-Stripe-Client-User-Agent': clientUserAgent,\n      'X-Stripe-Client-Telemetry': this._getTelemetryHeader(),\n      'Stripe-Version': apiVersion,\n      'Stripe-Account': this._stripe.getApiField('stripeAccount'),\n      'Idempotency-Key': this._defaultIdempotencyKey(\n        method,\n        userSuppliedSettings\n      ),\n    };\n\n    // As per https://datatracker.ietf.org/doc/html/rfc7230#section-3.3.2:\n    //   A user agent SHOULD send a Content-Length in a request message when\n    //   no Transfer-Encoding is sent and the request method defines a meaning\n    //   for an enclosed payload body.  For example, a Content-Length header\n    //   field is normally sent in a POST request even when the value is 0\n    //   (indicating an empty payload body).  A user agent SHOULD NOT send a\n    //   Content-Length header field when the request message does not contain\n    //   a payload body and the method semantics do not anticipate such a\n    //   body.\n    //\n    // These method types are expected to have bodies and so we should always\n    // include a Content-Length.\n    const methodHasPayload =\n      method == 'POST' || method == 'PUT' || method == 'PATCH';\n\n    // If a content length was specified, we always include it regardless of\n    // whether the method semantics anticipate such a body. This keeps us\n    // consistent with historical behavior. We do however want to warn on this\n    // and fix these cases as they are semantically incorrect.\n    if (methodHasPayload || contentLength) {\n      if (!methodHasPayload) {\n        utils.emitWarning(\n          `${method} method had non-zero contentLength but no payload is expected for this verb`\n        );\n      }\n      defaultHeaders['Content-Length'] = contentLength;\n    }\n\n    return Object.assign(\n      utils.removeNullish(defaultHeaders),\n      // If the user supplied, say 'idempotency-key', override instead of appending by ensuring caps are the same.\n      utils.normalizeHeaders(userSuppliedHeaders)\n    );\n  },\n\n  _getUserAgentString() {\n    const packageVersion = this._stripe.getConstant('PACKAGE_VERSION');\n    const appInfo = this._stripe._appInfo\n      ? this._stripe.getAppInfoAsString()\n      : '';\n\n    return `Stripe/v1 NodeBindings/${packageVersion} ${appInfo}`.trim();\n  },\n\n  _getTelemetryHeader() {\n    if (\n      this._stripe.getTelemetryEnabled() &&\n      this._stripe._prevRequestMetrics.length > 0\n    ) {\n      const metrics = this._stripe._prevRequestMetrics.shift();\n      return JSON.stringify({\n        last_request_metrics: metrics,\n      });\n    }\n  },\n\n  _recordRequestMetrics(requestId, requestDurationMs) {\n    if (this._stripe.getTelemetryEnabled() && requestId) {\n      if (\n        this._stripe._prevRequestMetrics.length >\n        StripeResource.MAX_BUFFERED_REQUEST_METRICS\n      ) {\n        utils.emitWarning(\n          'Request metrics buffer is full, dropping telemetry message.'\n        );\n      } else {\n        this._stripe._prevRequestMetrics.push({\n          request_id: requestId,\n          request_duration_ms: requestDurationMs,\n        });\n      }\n    }\n  },\n\n  _request(method, host, path, data, auth, options = {}, callback) {\n    let requestData;\n\n    const retryRequest = (\n      requestFn,\n      apiVersion,\n      headers,\n      requestRetries,\n      retryAfter\n    ) => {\n      return setTimeout(\n        requestFn,\n        this._getSleepTimeInMS(requestRetries, retryAfter),\n        apiVersion,\n        headers,\n        requestRetries + 1\n      );\n    };\n\n    const makeRequest = (apiVersion, headers, numRetries) => {\n      // timeout can be set on a per-request basis. Favor that over the global setting\n      const timeout =\n        options.settings &&\n        Number.isInteger(options.settings.timeout) &&\n        options.settings.timeout >= 0\n          ? options.settings.timeout\n          : this._stripe.getApiField('timeout');\n\n      const req = this._stripe\n        .getApiField('httpClient')\n        .makeRequest(\n          host || this._stripe.getApiField('host'),\n          this._stripe.getApiField('port'),\n          path,\n          method,\n          headers,\n          requestData,\n          this._stripe.getApiField('protocol'),\n          timeout\n        );\n\n      const requestStartTime = Date.now();\n\n      const requestEvent = utils.removeNullish({\n        api_version: apiVersion,\n        account: headers['Stripe-Account'],\n        idempotency_key: headers['Idempotency-Key'],\n        method,\n        path,\n        request_start_time: requestStartTime,\n      });\n\n      const requestRetries = numRetries || 0;\n\n      const maxRetries = this._getMaxNetworkRetries(options.settings);\n\n      this._stripe._emitter.emit('request', requestEvent);\n\n      req\n        .then((res) => {\n          if (this._shouldRetry(res, requestRetries, maxRetries)) {\n            return retryRequest(\n              makeRequest,\n              apiVersion,\n              headers,\n              requestRetries,\n              res.getHeaders()['retry-after']\n            );\n          } else if (options.streaming && res.getStatusCode() < 400) {\n            return this._streamingResponseHandler(requestEvent, callback)(res);\n          } else {\n            return this._jsonResponseHandler(requestEvent, callback)(res);\n          }\n        })\n        .catch((error) => {\n          if (this._shouldRetry(null, requestRetries, maxRetries)) {\n            return retryRequest(\n              makeRequest,\n              apiVersion,\n              headers,\n              requestRetries,\n              null\n            );\n          } else {\n            const isTimeoutError =\n              error.code && error.code === HttpClient.TIMEOUT_ERROR_CODE;\n\n            return callback.call(\n              this,\n              new StripeConnectionError({\n                message: isTimeoutError\n                  ? `Request aborted due to timeout being reached (${timeout}ms)`\n                  : this._generateConnectionErrorMessage(requestRetries),\n                detail: error,\n              })\n            );\n          }\n        });\n    };\n\n    const prepareAndMakeRequest = (error, data) => {\n      if (error) {\n        return callback(error);\n      }\n\n      requestData = data;\n\n      this._stripe.getClientUserAgent((clientUserAgent) => {\n        const apiVersion = this._stripe.getApiField('version');\n        const headers = this._makeHeaders(\n          auth,\n          requestData.length,\n          apiVersion,\n          clientUserAgent,\n          method,\n          options.headers,\n          options.settings\n        );\n\n        makeRequest(apiVersion, headers);\n      });\n    };\n\n    if (this.requestDataProcessor) {\n      this.requestDataProcessor(\n        method,\n        data,\n        options.headers,\n        prepareAndMakeRequest\n      );\n    } else {\n      prepareAndMakeRequest(null, utils.stringifyRequestData(data || {}));\n    }\n  },\n};\n\nmodule.exports = StripeResource;\n"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AAEA,MAAMC,KAAK,GAAGD,OAAO,CAAC,SAAD,CAArB;;AACA,MAAM;EACJE,qBADI;EAEJC,yBAFI;EAGJC,qBAHI;EAIJC,oBAJI;EAKJC,WALI;EAMJC;AANI,IAOFP,OAAO,CAAC,SAAD,CAPX;;AASA,MAAM;EAACQ;AAAD,IAAeR,OAAO,CAAC,kBAAD,CAA5B,C,CAEA;;;AACAS,cAAc,CAACC,MAAf,GAAwBT,KAAK,CAACU,WAA9B,C,CAEA;;AACAF,cAAc,CAACG,MAAf,GAAwBZ,OAAO,CAAC,gBAAD,CAA/B;AACAS,cAAc,CAACI,aAAf,GAA+Bb,OAAO,CAAC,sBAAD,CAAtC;AAEAS,cAAc,CAACK,4BAAf,GAA8C,GAA9C;AACA,MAAMC,oBAAoB,GAAG,EAA7B;AAEA;AACA;AACA;;AACA,SAASN,cAAT,CAAwBO,MAAxB,EAAgCC,iBAAhC,EAAmD;EACjD,KAAKC,OAAL,GAAeF,MAAf;;EACA,IAAIC,iBAAJ,EAAuB;IACrB,MAAM,IAAIE,KAAJ,CACJ,0FADI,CAAN;EAGD;;EAED,KAAKC,QAAL,GAAgBnB,KAAK,CAACoB,mBAAN,CACd,KAAKD,QAAL,IAAiBJ,MAAM,CAACM,WAAP,CAAmB,UAAnB,CADH,CAAhB;EAGA,KAAKC,YAAL,GAAoB,KAAKxB,IAAzB;EACA,KAAKA,IAAL,GAAYE,KAAK,CAACoB,mBAAN,CAA0B,KAAKtB,IAA/B,CAAZ,CAZiD,CAcjD;EACA;;EACA,IAAI,KAAKyB,YAAT,EAAuB;IACrB,KAAKA,YAAL,CAAkBC,OAAlB,CAA0B,UAASC,UAAT,EAAqB;MAC7C,KAAKA,UAAL,IAAmBjB,cAAc,CAACI,aAAf,CAA6Ba,UAA7B,CAAnB;IACD,CAFD,EAEG,IAFH;EAGD;;EAED,KAAKC,UAAL,CAAgB,GAAGC,SAAnB;AACD;;AAEDnB,cAAc,CAACoB,SAAf,GAA2B;EACzB9B,IAAI,EAAE,EADmB;EAGzB;EACAqB,QAAQ,EAAE,IAJe;;EAMzBO,UAAU,GAAG,CAAE,CANU;;EAQzB;EACA;EACA;EACA;EACAG,oBAAoB,EAAE,IAZG;EAczB;EACA;EACAC,eAAe,EAAE,IAhBQ;;EAkBzBC,cAAc,CAACC,WAAD,EAAcC,OAAd,EAAuB;IACnC,OAAOnC,IAAI,CACRoC,IADI,CAEH,KAAKf,QAAL,CAAcc,OAAd,CAFG,EAGH,KAAKnC,IAAL,CAAUmC,OAAV,CAHG,EAIH,OAAOD,WAAP,IAAsB,UAAtB,GAAmCA,WAAW,CAACC,OAAD,CAA9C,GAA0DD,WAJvD,EAMJG,OANI,CAMI,KANJ,EAMW,GANX,CAAP,CADmC,CAOX;EACzB,CA1BwB;;EA4BzB;EACA;EACA;EACAC,6BAA6B,CAACC,eAAD,EAAkB;IAC7C,OAAQ,IAAGvC,IAAI,CACZoC,IADQ,CACH,KAAKZ,YADF,EACgBe,eAAe,IAAI,EADnC,EAERF,OAFQ,CAEA,KAFA,EAEO,GAFP,CAEY,EAFvB,CAD6C,CAGnB;EAC3B,CAnCwB;;EAqCzB;EACAG,WAAW,EAAEtC,KAAK,CAACuC,6BAtCM;;EAwCzBC,eAAe,CAACC,OAAD,EAAUC,GAAV,EAAeC,QAAf,EAAyB;IACtC,OAAO,MAAM;MACX,MAAMC,UAAU,GAAG,IAAIC,SAAJ,CAAc,WAAd,CAAnB;MACAD,UAAU,CAACE,IAAX,GAAkB,WAAlB;MAEAJ,GAAG,CAACK,OAAJ,CAAYH,UAAZ;IACD,CALD;EAMD,CA/CwB;;EAiDzBI,2BAA2B,CAACC,GAAD,EAAMC,OAAN,EAAe;IACxC;IACA;IAEA;IACAD,GAAG,CAACE,SAAJ,GAAgBD,OAAO,CAAC,YAAD,CAAvB;IACAD,GAAG,CAACG,aAAJ,GAAoBH,GAAG,CAACG,aAAJ,IAAqBF,OAAO,CAAC,gBAAD,CAAhD;IACAD,GAAG,CAACI,UAAJ,GAAiBJ,GAAG,CAACI,UAAJ,IAAkBH,OAAO,CAAC,gBAAD,CAA1C;IACAD,GAAG,CAACK,cAAJ,GAAqBL,GAAG,CAACK,cAAJ,IAAsBJ,OAAO,CAAC,iBAAD,CAAlD;EACD,CA1DwB;;EA4DzBK,kBAAkB,CAACC,YAAD,EAAeC,UAAf,EAA2BP,OAA3B,EAAoC;IACpD,MAAMQ,cAAc,GAAGC,IAAI,CAACC,GAAL,EAAvB;IACA,MAAMC,iBAAiB,GAAGH,cAAc,GAAGF,YAAY,CAACM,kBAAxD;IAEA,OAAO9D,KAAK,CAAC+D,aAAN,CAAoB;MACzBC,WAAW,EAAEd,OAAO,CAAC,gBAAD,CADK;MAEzBe,OAAO,EAAEf,OAAO,CAAC,gBAAD,CAFS;MAGzBgB,eAAe,EAAEhB,OAAO,CAAC,iBAAD,CAHC;MAIzBvC,MAAM,EAAE6C,YAAY,CAAC7C,MAJI;MAKzBb,IAAI,EAAE0D,YAAY,CAAC1D,IALM;MAMzBqE,MAAM,EAAEV,UANiB;MAOzBW,UAAU,EAAE,KAAKC,aAAL,CAAmBnB,OAAnB,CAPa;MAQzBoB,OAAO,EAAET,iBARgB;MASzBC,kBAAkB,EAAEN,YAAY,CAACM,kBATR;MAUzBS,gBAAgB,EAAEb;IAVO,CAApB,CAAP;EAYD,CA5EwB;;EA8EzBW,aAAa,CAACnB,OAAD,EAAU;IACrB,OAAOA,OAAO,CAAC,YAAD,CAAd;EACD,CAhFwB;;EAkFzB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEsB,yBAAyB,CAAChB,YAAD,EAAeb,QAAf,EAAyB;IAChD,OAAQ8B,GAAD,IAAS;MACd,MAAMvB,OAAO,GAAGuB,GAAG,CAACC,UAAJ,EAAhB;;MAEA,MAAMC,sBAAsB,GAAG,MAAM;QACnC,MAAMC,aAAa,GAAG,KAAKrB,kBAAL,CACpBC,YADoB,EAEpBiB,GAAG,CAACI,aAAJ,EAFoB,EAGpB3B,OAHoB,CAAtB;;QAKA,KAAKjC,OAAL,CAAa6D,QAAb,CAAsBC,IAAtB,CAA2B,UAA3B,EAAuCH,aAAvC;;QACA,KAAKI,qBAAL,CACE,KAAKX,aAAL,CAAmBnB,OAAnB,CADF,EAEE0B,aAAa,CAACN,OAFhB;MAID,CAXD;;MAaA,MAAMW,MAAM,GAAGR,GAAG,CAACS,QAAJ,CAAaP,sBAAb,CAAf,CAhBc,CAkBd;MACA;MACA;;MACA,KAAK3B,2BAAL,CAAiCiC,MAAjC,EAAyC/B,OAAzC;;MAEA,OAAOP,QAAQ,CAAC,IAAD,EAAOsC,MAAP,CAAf;IACD,CAxBD;EAyBD,CAtHwB;;EAwHzB;AACF;AACA;AACA;AACA;EACEE,oBAAoB,CAAC3B,YAAD,EAAeb,QAAf,EAAyB;IAC3C,OAAQ8B,GAAD,IAAS;MACd,MAAMvB,OAAO,GAAGuB,GAAG,CAACC,UAAJ,EAAhB;;MACA,MAAMvB,SAAS,GAAG,KAAKkB,aAAL,CAAmBnB,OAAnB,CAAlB;;MACA,MAAMO,UAAU,GAAGgB,GAAG,CAACI,aAAJ,EAAnB;;MAEA,MAAMD,aAAa,GAAG,KAAKrB,kBAAL,CACpBC,YADoB,EAEpBC,UAFoB,EAGpBP,OAHoB,CAAtB;;MAKA,KAAKjC,OAAL,CAAa6D,QAAb,CAAsBC,IAAtB,CAA2B,UAA3B,EAAuCH,aAAvC;;MAEAH,GAAG,CACAW,MADH,GAEGC,IAFH,CAGKC,YAAD,IAAkB;QAChB,IAAIA,YAAY,CAACC,KAAjB,EAAwB;UACtB,IAAIC,GAAJ,CADsB,CAGtB;UACA;;UACA,IAAI,OAAOF,YAAY,CAACC,KAApB,KAA8B,QAAlC,EAA4C;YAC1CD,YAAY,CAACC,KAAb,GAAqB;cACnBE,IAAI,EAAEH,YAAY,CAACC,KADA;cAEnBG,OAAO,EAAEJ,YAAY,CAACK;YAFH,CAArB;UAID;;UAEDL,YAAY,CAACC,KAAb,CAAmBrC,OAAnB,GAA6BA,OAA7B;UACAoC,YAAY,CAACC,KAAb,CAAmB9B,UAAnB,GAAgCA,UAAhC;UACA6B,YAAY,CAACC,KAAb,CAAmBpC,SAAnB,GAA+BA,SAA/B;;UAEA,IAAIM,UAAU,KAAK,GAAnB,EAAwB;YACtB+B,GAAG,GAAG,IAAItF,yBAAJ,CAA8BoF,YAAY,CAACC,KAA3C,CAAN;UACD,CAFD,MAEO,IAAI9B,UAAU,KAAK,GAAnB,EAAwB;YAC7B+B,GAAG,GAAG,IAAIrF,qBAAJ,CAA0BmF,YAAY,CAACC,KAAvC,CAAN;UACD,CAFM,MAEA,IAAI9B,UAAU,KAAK,GAAnB,EAAwB;YAC7B+B,GAAG,GAAG,IAAIpF,oBAAJ,CAAyBkF,YAAY,CAACC,KAAtC,CAAN;UACD,CAFM,MAEA;YACLC,GAAG,GAAGnF,WAAW,CAACuF,QAAZ,CAAqBN,YAAY,CAACC,KAAlC,CAAN;UACD;;UAED,MAAMC,GAAN;QACD;;QAED,OAAOF,YAAP;MACD,CAlCL,EAmCKO,CAAD,IAAO;QACL,MAAM,IAAIvF,cAAJ,CAAmB;UACvBoF,OAAO,EAAE,2CADc;UAEvBI,SAAS,EAAED,CAFY;UAGvB1C,SAAS,EAAED,OAAO,CAAC,YAAD;QAHK,CAAnB,CAAN;MAKD,CAzCL,EA2CGmC,IA3CH,CA4CKC,YAAD,IAAkB;QAChB,KAAKN,qBAAL,CAA2B7B,SAA3B,EAAsCyB,aAAa,CAACN,OAApD,EADgB,CAGhB;;;QACA,MAAMyB,WAAW,GAAGtB,GAAG,CAACuB,cAAJ,EAApB;;QACA,KAAKhD,2BAAL,CAAiC+C,WAAjC,EAA8C7C,OAA9C;;QACA+C,MAAM,CAACC,cAAP,CAAsBZ,YAAtB,EAAoC,cAApC,EAAoD;UAClDa,UAAU,EAAE,KADsC;UAElDC,QAAQ,EAAE,KAFwC;UAGlDC,KAAK,EAAEN;QAH2C,CAApD;QAMApD,QAAQ,CAAC2D,IAAT,CAAc,IAAd,EAAoB,IAApB,EAA0BhB,YAA1B;MACD,CAzDL,EA0DKO,CAAD,IAAOlD,QAAQ,CAAC2D,IAAT,CAAc,IAAd,EAAoBT,CAApB,EAAuB,IAAvB,CA1DX;IA4DD,CAxED;EAyED,CAvMwB;;EAyMzBU,+BAA+B,CAACC,cAAD,EAAiB;IAC9C,OAAQ,mDACNA,cAAc,GAAG,CAAjB,GAAsB,wBAAuBA,cAAe,SAA5D,GAAuE,EACxE,EAFD;EAGD,CA7MwB;;EA+MzBC,aAAa,CAAC/D,GAAD,EAAM8D,cAAN,EAAsB7D,QAAtB,EAAgC;IAC3C,OAAO,CAAC+C,OAAD,EAAUgB,MAAV,KAAqB;MAC1B/D,QAAQ,CAAC2D,IAAT,CACE,IADF,EAEE,IAAIrG,qBAAJ,CAA0B;QACxByF,OAAO,EAAE,KAAKa,+BAAL,CAAqCC,cAArC,CADe;QAExBE,MAAM,EAAEnB;MAFgB,CAA1B,CAFF,EAME,IANF;IAQD,CATD;EAUD,CA1NwB;;EA4NzB;EACAoB,YAAY,CAAClC,GAAD,EAAMmC,UAAN,EAAkBC,UAAlB,EAA8B;IACxC;IACA,IAAID,UAAU,IAAIC,UAAlB,EAA8B;MAC5B,OAAO,KAAP;IACD,CAJuC,CAMxC;;;IACA,IAAI,CAACpC,GAAL,EAAU;MACR,OAAO,IAAP;IACD,CATuC,CAWxC;IACA;;;IACA,IAAIA,GAAG,CAACC,UAAJ,GAAiB,qBAAjB,MAA4C,OAAhD,EAAyD;MACvD,OAAO,KAAP;IACD;;IACD,IAAID,GAAG,CAACC,UAAJ,GAAiB,qBAAjB,MAA4C,MAAhD,EAAwD;MACtD,OAAO,IAAP;IACD,CAlBuC,CAoBxC;;;IACA,IAAID,GAAG,CAACI,aAAJ,OAAwB,GAA5B,EAAiC;MAC/B,OAAO,IAAP;IACD,CAvBuC,CAyBxC;IACA;IACA;IACA;IACA;;;IACA,IAAIJ,GAAG,CAACI,aAAJ,MAAuB,GAA3B,EAAgC;MAC9B,OAAO,IAAP;IACD;;IAED,OAAO,KAAP;EACD,CAhQwB;;EAkQzBiC,iBAAiB,CAACF,UAAD,EAAgC;IAAA,IAAnBG,UAAmB,uEAAN,IAAM;;IAC/C,MAAMC,wBAAwB,GAAG,KAAK/F,OAAL,CAAagG,2BAAb,EAAjC;;IACA,MAAMC,oBAAoB,GAAG,KAAKjG,OAAL,CAAakG,uBAAb,EAA7B,CAF+C,CAI/C;IACA;IACA;;;IACA,IAAIC,YAAY,GAAGC,IAAI,CAACC,GAAL,CACjBN,wBAAwB,GAAGK,IAAI,CAACE,GAAL,CAASX,UAAU,GAAG,CAAtB,EAAyB,CAAzB,CADV,EAEjBM,oBAFiB,CAAnB,CAP+C,CAY/C;IACA;;IACAE,YAAY,IAAI,OAAO,IAAIC,IAAI,CAACG,MAAL,EAAX,CAAhB,CAd+C,CAgB/C;;IACAJ,YAAY,GAAGC,IAAI,CAACI,GAAL,CAAST,wBAAT,EAAmCI,YAAnC,CAAf,CAjB+C,CAmB/C;;IACA,IAAIM,MAAM,CAACC,SAAP,CAAiBZ,UAAjB,KAAgCA,UAAU,IAAIjG,oBAAlD,EAAwE;MACtEsG,YAAY,GAAGC,IAAI,CAACI,GAAL,CAASL,YAAT,EAAuBL,UAAvB,CAAf;IACD;;IAED,OAAOK,YAAY,GAAG,IAAtB;EACD,CA3RwB;;EA6RzB;EACAQ,qBAAqB,GAAgB;IAAA,IAAfC,QAAe,uEAAJ,EAAI;IACnC,OAAOA,QAAQ,CAACC,iBAAT,IACLJ,MAAM,CAACC,SAAP,CAAiBE,QAAQ,CAACC,iBAA1B,CADK,GAEHD,QAAQ,CAACC,iBAFN,GAGH,KAAK7G,OAAL,CAAa8G,oBAAb,EAHJ;EAID,CAnSwB;;EAqSzBC,sBAAsB,CAACrH,MAAD,EAASkH,QAAT,EAAmB;IACvC;IACA,MAAMhB,UAAU,GAAG,KAAKe,qBAAL,CAA2BC,QAA3B,CAAnB;;IAEA,IAAIlH,MAAM,KAAK,MAAX,IAAqBkG,UAAU,GAAG,CAAtC,EAAyC;MACvC,OAAQ,qBAAoB7G,KAAK,CAACiI,KAAN,EAAc,EAA1C;IACD;;IACD,OAAO,IAAP;EACD,CA7SwB;;EA+SzBC,YAAY,CACVC,IADU,EAEVC,aAFU,EAGV/E,UAHU,EAIVgF,eAJU,EAKV1H,MALU,EAMV2H,mBANU,EAOVC,oBAPU,EAQV;IACA,MAAMC,cAAc,GAAG;MACrB;MACAC,aAAa,EAAEN,IAAI,GAAI,UAASA,IAAK,EAAlB,GAAsB,KAAKlH,OAAL,CAAaI,WAAb,CAAyB,MAAzB,CAFpB;MAGrBqH,MAAM,EAAE,kBAHa;MAIrB,gBAAgB,mCAJK;MAKrB,cAAc,KAAKC,mBAAL,EALO;MAMrB,8BAA8BN,eANT;MAOrB,6BAA6B,KAAKO,mBAAL,EAPR;MAQrB,kBAAkBvF,UARG;MASrB,kBAAkB,KAAKpC,OAAL,CAAaI,WAAb,CAAyB,eAAzB,CATG;MAUrB,mBAAmB,KAAK2G,sBAAL,CACjBrH,MADiB,EAEjB4H,oBAFiB;IAVE,CAAvB,CADA,CAiBA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IACA,MAAMM,gBAAgB,GACpBlI,MAAM,IAAI,MAAV,IAAoBA,MAAM,IAAI,KAA9B,IAAuCA,MAAM,IAAI,OADnD,CA7BA,CAgCA;IACA;IACA;IACA;;IACA,IAAIkI,gBAAgB,IAAIT,aAAxB,EAAuC;MACrC,IAAI,CAACS,gBAAL,EAAuB;QACrB7I,KAAK,CAAC8I,WAAN,CACG,GAAEnI,MAAO,6EADZ;MAGD;;MACD6H,cAAc,CAAC,gBAAD,CAAd,GAAmCJ,aAAnC;IACD;;IAED,OAAOnC,MAAM,CAAC8C,MAAP,CACL/I,KAAK,CAAC+D,aAAN,CAAoByE,cAApB,CADK,EAEL;IACAxI,KAAK,CAACgJ,gBAAN,CAAuBV,mBAAvB,CAHK,CAAP;EAKD,CAzWwB;;EA2WzBK,mBAAmB,GAAG;IACpB,MAAMM,cAAc,GAAG,KAAKhI,OAAL,CAAaiI,WAAb,CAAyB,iBAAzB,CAAvB;;IACA,MAAMC,OAAO,GAAG,KAAKlI,OAAL,CAAamI,QAAb,GACZ,KAAKnI,OAAL,CAAaoI,kBAAb,EADY,GAEZ,EAFJ;IAIA,OAAQ,0BAAyBJ,cAAe,IAAGE,OAAQ,EAApD,CAAsDG,IAAtD,EAAP;EACD,CAlXwB;;EAoXzBV,mBAAmB,GAAG;IACpB,IACE,KAAK3H,OAAL,CAAasI,mBAAb,MACA,KAAKtI,OAAL,CAAauI,mBAAb,CAAiCC,MAAjC,GAA0C,CAF5C,EAGE;MACA,MAAMC,OAAO,GAAG,KAAKzI,OAAL,CAAauI,mBAAb,CAAiCG,KAAjC,EAAhB;;MACA,OAAOC,IAAI,CAACC,SAAL,CAAe;QACpBC,oBAAoB,EAAEJ;MADF,CAAf,CAAP;IAGD;EACF,CA9XwB;;EAgYzB1E,qBAAqB,CAAC7B,SAAD,EAAYU,iBAAZ,EAA+B;IAClD,IAAI,KAAK5C,OAAL,CAAasI,mBAAb,MAAsCpG,SAA1C,EAAqD;MACnD,IACE,KAAKlC,OAAL,CAAauI,mBAAb,CAAiCC,MAAjC,GACAjJ,cAAc,CAACK,4BAFjB,EAGE;QACAb,KAAK,CAAC8I,WAAN,CACE,6DADF;MAGD,CAPD,MAOO;QACL,KAAK7H,OAAL,CAAauI,mBAAb,CAAiCO,IAAjC,CAAsC;UACpC3F,UAAU,EAAEjB,SADwB;UAEpC6G,mBAAmB,EAAEnG;QAFe,CAAtC;MAID;IACF;EACF,CAhZwB;;EAkZzBoG,QAAQ,CAACtJ,MAAD,EAASuJ,IAAT,EAAepK,IAAf,EAAqBqK,IAArB,EAA2BhC,IAA3B,EAAyD;IAAA,IAAxBiC,OAAwB,uEAAd,EAAc;IAAA,IAAVzH,QAAU;IAC/D,IAAI0H,WAAJ;;IAEA,MAAMC,YAAY,GAAG,CACnBC,SADmB,EAEnBlH,UAFmB,EAGnBH,OAHmB,EAInBsD,cAJmB,EAKnBO,UALmB,KAMhB;MACH,OAAOyD,UAAU,CACfD,SADe,EAEf,KAAKzD,iBAAL,CAAuBN,cAAvB,EAAuCO,UAAvC,CAFe,EAGf1D,UAHe,EAIfH,OAJe,EAKfsD,cAAc,GAAG,CALF,CAAjB;IAOD,CAdD;;IAgBA,MAAMiE,WAAW,GAAG,CAACpH,UAAD,EAAaH,OAAb,EAAsB0D,UAAtB,KAAqC;MACvD;MACA,MAAMnE,OAAO,GACX2H,OAAO,CAACvC,QAAR,IACAH,MAAM,CAACC,SAAP,CAAiByC,OAAO,CAACvC,QAAR,CAAiBpF,OAAlC,CADA,IAEA2H,OAAO,CAACvC,QAAR,CAAiBpF,OAAjB,IAA4B,CAF5B,GAGI2H,OAAO,CAACvC,QAAR,CAAiBpF,OAHrB,GAII,KAAKxB,OAAL,CAAaI,WAAb,CAAyB,SAAzB,CALN;;MAOA,MAAMqB,GAAG,GAAG,KAAKzB,OAAL,CACTI,WADS,CACG,YADH,EAEToJ,WAFS,CAGRP,IAAI,IAAI,KAAKjJ,OAAL,CAAaI,WAAb,CAAyB,MAAzB,CAHA,EAIR,KAAKJ,OAAL,CAAaI,WAAb,CAAyB,MAAzB,CAJQ,EAKRvB,IALQ,EAMRa,MANQ,EAORuC,OAPQ,EAQRmH,WARQ,EASR,KAAKpJ,OAAL,CAAaI,WAAb,CAAyB,UAAzB,CATQ,EAURoB,OAVQ,CAAZ;;MAaA,MAAMiI,gBAAgB,GAAG/G,IAAI,CAACC,GAAL,EAAzB;MAEA,MAAMJ,YAAY,GAAGxD,KAAK,CAAC+D,aAAN,CAAoB;QACvCC,WAAW,EAAEX,UAD0B;QAEvCY,OAAO,EAAEf,OAAO,CAAC,gBAAD,CAFuB;QAGvCgB,eAAe,EAAEhB,OAAO,CAAC,iBAAD,CAHe;QAIvCvC,MAJuC;QAKvCb,IALuC;QAMvCgE,kBAAkB,EAAE4G;MANmB,CAApB,CAArB;MASA,MAAMlE,cAAc,GAAGI,UAAU,IAAI,CAArC;;MAEA,MAAMC,UAAU,GAAG,KAAKe,qBAAL,CAA2BwC,OAAO,CAACvC,QAAnC,CAAnB;;MAEA,KAAK5G,OAAL,CAAa6D,QAAb,CAAsBC,IAAtB,CAA2B,SAA3B,EAAsCvB,YAAtC;;MAEAd,GAAG,CACA2C,IADH,CACSZ,GAAD,IAAS;QACb,IAAI,KAAKkC,YAAL,CAAkBlC,GAAlB,EAAuB+B,cAAvB,EAAuCK,UAAvC,CAAJ,EAAwD;UACtD,OAAOyD,YAAY,CACjBG,WADiB,EAEjBpH,UAFiB,EAGjBH,OAHiB,EAIjBsD,cAJiB,EAKjB/B,GAAG,CAACC,UAAJ,GAAiB,aAAjB,CALiB,CAAnB;QAOD,CARD,MAQO,IAAI0F,OAAO,CAACO,SAAR,IAAqBlG,GAAG,CAACI,aAAJ,KAAsB,GAA/C,EAAoD;UACzD,OAAO,KAAKL,yBAAL,CAA+BhB,YAA/B,EAA6Cb,QAA7C,EAAuD8B,GAAvD,CAAP;QACD,CAFM,MAEA;UACL,OAAO,KAAKU,oBAAL,CAA0B3B,YAA1B,EAAwCb,QAAxC,EAAkD8B,GAAlD,CAAP;QACD;MACF,CAfH,EAgBGmG,KAhBH,CAgBUrF,KAAD,IAAW;QAChB,IAAI,KAAKoB,YAAL,CAAkB,IAAlB,EAAwBH,cAAxB,EAAwCK,UAAxC,CAAJ,EAAyD;UACvD,OAAOyD,YAAY,CACjBG,WADiB,EAEjBpH,UAFiB,EAGjBH,OAHiB,EAIjBsD,cAJiB,EAKjB,IALiB,CAAnB;QAOD,CARD,MAQO;UACL,MAAMqE,cAAc,GAClBtF,KAAK,CAACzC,IAAN,IAAcyC,KAAK,CAACzC,IAAN,KAAevC,UAAU,CAACuK,kBAD1C;UAGA,OAAOnI,QAAQ,CAAC2D,IAAT,CACL,IADK,EAEL,IAAIrG,qBAAJ,CAA0B;YACxByF,OAAO,EAAEmF,cAAc,GAClB,iDAAgDpI,OAAQ,KADtC,GAEnB,KAAK8D,+BAAL,CAAqCC,cAArC,CAHoB;YAIxBE,MAAM,EAAEnB;UAJgB,CAA1B,CAFK,CAAP;QASD;MACF,CAvCH;IAwCD,CA/ED;;IAiFA,MAAMwF,qBAAqB,GAAG,CAACxF,KAAD,EAAQ4E,IAAR,KAAiB;MAC7C,IAAI5E,KAAJ,EAAW;QACT,OAAO5C,QAAQ,CAAC4C,KAAD,CAAf;MACD;;MAED8E,WAAW,GAAGF,IAAd;;MAEA,KAAKlJ,OAAL,CAAa+J,kBAAb,CAAiC3C,eAAD,IAAqB;QACnD,MAAMhF,UAAU,GAAG,KAAKpC,OAAL,CAAaI,WAAb,CAAyB,SAAzB,CAAnB;;QACA,MAAM6B,OAAO,GAAG,KAAKgF,YAAL,CACdC,IADc,EAEdkC,WAAW,CAACZ,MAFE,EAGdpG,UAHc,EAIdgF,eAJc,EAKd1H,MALc,EAMdyJ,OAAO,CAAClH,OANM,EAOdkH,OAAO,CAACvC,QAPM,CAAhB;;QAUA4C,WAAW,CAACpH,UAAD,EAAaH,OAAb,CAAX;MACD,CAbD;IAcD,CArBD;;IAuBA,IAAI,KAAKrB,oBAAT,EAA+B;MAC7B,KAAKA,oBAAL,CACElB,MADF,EAEEwJ,IAFF,EAGEC,OAAO,CAAClH,OAHV,EAIE6H,qBAJF;IAMD,CAPD,MAOO;MACLA,qBAAqB,CAAC,IAAD,EAAO/K,KAAK,CAACiL,oBAAN,CAA2Bd,IAAI,IAAI,EAAnC,CAAP,CAArB;IACD;EACF;;AAvhBwB,CAA3B;AA0hBAe,MAAM,CAACC,OAAP,GAAiB3K,cAAjB"},"metadata":{},"sourceType":"script"}